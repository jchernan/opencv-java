/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.cxcore;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
/**
 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2198</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvNArrayIterator extends Structure {
	/// number of arrays
	public int count;
	/// number of dimensions to iterate
	public int dims;
	/**
	 * maximal common linear size: { width = size, height = 1 }<br>
	 * C type : CvSize
	 */
	public CvSize size;
	/**
	 * pointers to the array slices<br>
	 * C type : uchar*[10]
	 */
	public Pointer[] ptr = new Pointer[10];
	/**
	 * for internal use<br>
	 * C type : int[32]
	 */
	public int[] stack = new int[32];
	/**
	 * pointers to the headers of the<br>
	 * matrices that are processed<br>
	 * C type : CvMatND*[10]
	 */
	public PointerByReference hdr;
	public CvNArrayIterator() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"count", "dims", "size", "ptr", "stack", "hdr"});
	}
	/**
	 * @param count number of arrays<br>
	 * @param dims number of dimensions to iterate<br>
	 * @param size maximal common linear size: { width = size, height = 1 }<br>
	 * C type : CvSize<br>
	 * @param ptr pointers to the array slices<br>
	 * C type : uchar*[10]<br>
	 * @param stack for internal use<br>
	 * C type : int[32]<br>
	 * @param hdr pointers to the headers of the<br>
	 * matrices that are processed<br>
	 * C type : CvMatND*[10]
	 */
	public CvNArrayIterator(int count, int dims, CvSize size, Pointer ptr[], int stack[], PointerByReference hdr) {
		super();
		this.count = count;
		this.dims = dims;
		this.size = size;
		if (ptr.length != this.ptr.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ptr = ptr;
		if (stack.length != this.stack.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.stack = stack;
		this.hdr = hdr;
		initFieldOrder();
	}
	public static class ByReference extends CvNArrayIterator implements Structure.ByReference {
		
	};
	public static class ByValue extends CvNArrayIterator implements Structure.ByValue {
		
	};
}
