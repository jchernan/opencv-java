/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.cxcore;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1740</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvMemStorage extends Structure {
	public int signature;
	/**
	 * First allocated block.<br>
	 * C type : CvMemBlock*
	 */
	public sj.opencv.jna.cxcore.CvMemBlock.ByReference bottom;
	/**
	 * Current memory block - top of the stack.<br>
	 * C type : CvMemBlock*
	 */
	public sj.opencv.jna.cxcore.CvMemBlock.ByReference top;
	/**
	 * We get new blocks from parent as needed.<br>
	 * C type : CvMemStorage*
	 */
	public CvMemStorage.ByReference parent;
	/// Block size.
	public int block_size;
	/// Remaining free space in current block.
	public int free_space;
	public CvMemStorage() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"signature", "bottom", "top", "parent", "block_size", "free_space"});
	}
	/**
	 * @param bottom First allocated block.<br>
	 * C type : CvMemBlock*<br>
	 * @param top Current memory block - top of the stack.<br>
	 * C type : CvMemBlock*<br>
	 * @param parent We get new blocks from parent as needed.<br>
	 * C type : CvMemStorage*<br>
	 * @param block_size Block size.<br>
	 * @param free_space Remaining free space in current block.
	 */
	public CvMemStorage(int signature, sj.opencv.jna.cxcore.CvMemBlock.ByReference bottom, sj.opencv.jna.cxcore.CvMemBlock.ByReference top, CvMemStorage.ByReference parent, int block_size, int free_space) {
		super();
		this.signature = signature;
		this.bottom = bottom;
		this.top = top;
		this.parent = parent;
		this.block_size = block_size;
		this.free_space = free_space;
		initFieldOrder();
	}

	public CvMemStorage(Pointer p){
		super(p);
	}

	public static class ByReference extends CvMemStorage implements Structure.ByReference {
		public ByReference(){
			super();
		}
		public ByReference(Pointer p){
			super(p);
		}
	};
	public static class ByValue extends CvMemStorage implements Structure.ByValue {

	};
}
