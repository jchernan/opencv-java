/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.cxcore;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.ShortByReference;
/**
 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1440</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvMat extends Structure {
	public int type;
	public int step;
	/**
	 * for internal use only<br>
	 * C type : int*
	 */
	public IntByReference refcount;
	public int hdr_refcount;
	/// C type : data_union
	public data_union data;
	public int rows;
	public int cols;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1439</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1439</i>
	public static class data_union extends Union {
		/// C type : uchar*
		public Pointer ptr;
		/// C type : short*
		public ShortByReference s;
		/// C type : int*
		public IntByReference i;
		/// C type : float*
		public FloatByReference fl;
		/// C type : double*
		public DoubleByReference db;
		public data_union() {
			super();
		}
		/// @param db C type : double*
		public data_union(DoubleByReference db) {
			super();
			this.db = db;
			setType(DoubleByReference.class);
		}
		/// @param s C type : short*
		public data_union(ShortByReference s) {
			super();
			this.s = s;
			setType(ShortByReference.class);
		}
		/// @param i C type : int*
		public data_union(IntByReference i) {
			super();
			this.i = i;
			setType(IntByReference.class);
		}
		/// @param fl C type : float*
		public data_union(FloatByReference fl) {
			super();
			this.fl = fl;
			setType(FloatByReference.class);
		}
		/// @param ptr C type : uchar*
		public data_union(Pointer ptr) {
			super();
			this.ptr = ptr;
			setType(Pointer.class);
		}
		public static class ByReference extends data_union implements Structure.ByReference {
			
		};
		public static class ByValue extends data_union implements Structure.ByValue {
			
		};
	};
	public CvMat() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"type", "step", "refcount", "hdr_refcount", "data", "rows", "cols"});
	}
	/**
	 * @param refcount for internal use only<br>
	 * C type : int*<br>
	 * @param data C type : data_union
	 */
	public CvMat(int type, int step, IntByReference refcount, int hdr_refcount, data_union data, int rows, int cols) {
		super();
		this.type = type;
		this.step = step;
		this.refcount = refcount;
		this.hdr_refcount = hdr_refcount;
		this.data = data;
		this.rows = rows;
		this.cols = cols;
		initFieldOrder();
	}
	public static class ByReference extends CvMat implements Structure.ByReference {
		
	};
	public static class ByValue extends CvMat implements Structure.ByValue {
		
	};
}
