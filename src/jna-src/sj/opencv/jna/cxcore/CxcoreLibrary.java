/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.cxcore;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.win32.StdCallLibrary.StdCallCallback;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import sj.opencv.jna.highgui.HighguiLibrary.CvArr;
/**
 * JNA Wrapper for library <b>cxcore</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CxcoreLibrary extends Library {
	/// everithing is ok
	public static final int CV_StsOk = (int)0;
	/// pseudo error for back trace
	public static final int CV_StsBackTrace = (int)-1;
	/// unknown /unspecified error
	public static final int CV_StsError = (int)-2;
	/// internal error (bad state)
	public static final int CV_StsInternal = (int)-3;
	/// insufficient memory
	public static final int CV_StsNoMem = (int)-4;
	/// function arg/param is bad
	public static final int CV_StsBadArg = (int)-5;
	/// unsupported function
	public static final int CV_StsBadFunc = (int)-6;
	/// iter. didn't converge
	public static final int CV_StsNoConv = (int)-7;
	/// tracing
	public static final int CV_StsAutoTrace = (int)-8;
	/// image header is NULL
	public static final int CV_HeaderIsNull = (int)-9;
	/// image size is invalid
	public static final int CV_BadImageSize = (int)-10;
	/// offset is invalid
	public static final int CV_BadOffset = (int)-11;
	/// /
	public static final int CV_BadDataPtr = (int)-12;
	/// /
	public static final int CV_BadStep = (int)-13;
	/// /
	public static final int CV_BadModelOrChSeq = (int)-14;
	/// /
	public static final int CV_BadNumChannels = (int)-15;
	/// /
	public static final int CV_BadNumChannel1U = (int)-16;
	/// /
	public static final int CV_BadDepth = (int)-17;
	/// /
	public static final int CV_BadAlphaChannel = (int)-18;
	/// /
	public static final int CV_BadOrder = (int)-19;
	/// /
	public static final int CV_BadOrigin = (int)-20;
	/// /
	public static final int CV_BadAlign = (int)-21;
	/// /
	public static final int CV_BadCallBack = (int)-22;
	/// /
	public static final int CV_BadTileSize = (int)-23;
	/// /
	public static final int CV_BadCOI = (int)-24;
	/// /
	public static final int CV_BadROISize = (int)-25;
	/// /
	public static final int CV_MaskIsTiled = (int)-26;
	/// null pointer
	public static final int CV_StsNullPtr = (int)-27;
	/// incorrect vector length
	public static final int CV_StsVecLengthErr = (int)-28;
	/// incorr. filter structure content
	public static final int CV_StsFilterStructContentErr = (int)-29;
	/// incorr. transform kernel content
	public static final int CV_StsKernelStructContentErr = (int)-30;
	/// incorrect filter ofset value
	public static final int CV_StsFilterOffsetErr = (int)-31;
	/// the input/output structure size is incorrect
	public static final int CV_StsBadSize = (int)-201;
	/// division by zero
	public static final int CV_StsDivByZero = (int)-202;
	/// in-place operation is not supported
	public static final int CV_StsInplaceNotSupported = (int)-203;
	/// request can't be completed
	public static final int CV_StsObjectNotFound = (int)-204;
	/// formats of input/output arrays differ
	public static final int CV_StsUnmatchedFormats = (int)-205;
	/// flag is wrong or not supported
	public static final int CV_StsBadFlag = (int)-206;
	/// bad CvPoint
	public static final int CV_StsBadPoint = (int)-207;
	/// bad format of mask (neither 8uC1 nor 8sC1)
	public static final int CV_StsBadMask = (int)-208;
	/// sizes of input/output structures do not match
	public static final int CV_StsUnmatchedSizes = (int)-209;
	/// the data format/type is not supported by the function
	public static final int CV_StsUnsupportedFormat = (int)-210;
	/// some of parameters are out of range
	public static final int CV_StsOutOfRange = (int)-211;
	/// invalid syntax/structure of the parsed file
	public static final int CV_StsParseError = (int)-212;
	/// the requested function/feature is not implemented
	public static final int CV_StsNotImplemented = (int)-213;
	/// an allocated block has been corrupted
	public static final int CV_StsBadMemBlock = (int)-214;
	/// assertion failed
	public static final int CV_StsAssert = (int)-215;
	public static final int CV_GpuNotSupported = (int)-216;
	public static final int CV_GpuApiCallError = (int)-217;
	public static final int CV_OpenGlNotSupported = (int)-218;
	public static final int CV_OpenGlApiCallError = (int)-219;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final String CV_TYPE_NAME_SEQ = (String)"opencv-sequence";
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CMP_LE = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_KIND_CURVE = (int)(1 << 12);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_SVD_MODIFY_A = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_SVD_SYM = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_USER = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_HERSHEY_DUPLEX = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final String CV_TYPE_NAME_MATND = (String)"opencv-nd-matrix";
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_GRAPH_EDGE = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_SEARCH_TREE_NODE_FLAG = (int)(1 << 29);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MAT_TYPE_MASK = (int)((1 << 3) * 512 - 1);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_KIND_GENERIC = (int)(0 << 12);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DEPTH_64F = (int)64;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_SSE4_2 = (int)7;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_SVD_U_T = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_SSE4_1 = (int)6;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_ALIGN_DWORD = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final double CV_LOG2 = (double)0.69314718055994530941723212145818;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_ALIGN_8BYTES = (int)8;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MAGIC_MASK = (int)-65536;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_ORIGIN_TL = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_POLYLINE = (int)((1 << 12) | (((4) & ((1 << 3) - 1)) + (((2) - 1) << 3)));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DXT_INVERSE = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DEPTH_1U = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DXT_ROWS = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_SORT_ASCENDING = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DATA_ORDER_PIXEL = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32S = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final String CV_TYPE_NAME_SPARSE_MAT = (String)"opencv-sparse-matrix";
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final double CV_PI = (double)3.1415926535897932384626433832795;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CMP_NE = (int)5;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_NAMED = (int)64;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FILLED = (int)-1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CMP_LT = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_COVAR_SCALE = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_QR = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_TYPE_MASK = (int)7;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_REDUCE_AVG = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_ALIGN_16BYTES = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_NORM_MASK = (int)7;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_STORAGE_WRITE_BINARY = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FRONT = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_BORDER_REFLECT = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_COVAR_COLS = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_KMEANS_USE_INITIAL_LABELS = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_C = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_MAGIC_VAL = (int)1117323264;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GEMM_B_T = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_L1 = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_BACK_EDGE = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_L2 = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16S = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_INT = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16U = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_POLYGON = (int)((1 << (2 + 12)) | ((1 << 12) | (((4) & ((1 << 3) - 1)) + (((2) - 1) << 3))));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_LU = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_REDUCE_SUM = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_OVER = (int)-1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_RNG_COEFF = (int)-130063606;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_RELATIVE = (int)8;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_FLOAT = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_BACK = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_ErrModeParent = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MATND_MAGIC_VAL = (int)1111687168;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_FORWARD_EDGE = (int)8;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SET_MAGIC_VAL = (int)1117257728;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final String CV_TYPE_NAME_MAT = (String)"opencv-matrix";
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DEPTH_8U = (int)8;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MAT_CONT_FLAG = (int)(1 << 14);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DEPTH_8S = (int)(-2147483648 | 8);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CHECK_QUIET = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_NONE = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_ALIGN_32BYTES = (int)32;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_HERSHEY_COMPLEX = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DXT_INVERSE_SCALE = (int)(1 + 2);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_INTEGER = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_BORDER_WRAP = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_CROSS_EDGE = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_FLAG_SIMPLE = (int)(0 << (2 + 12));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_HERSHEY_SIMPLEX = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_HERSHEY_SCRIPT_SIMPLEX = (int)6;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_64F = (int)6;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_FLAG_CLOSED = (int)(1 << (2 + 12));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_REF = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_PCA_DATA_AS_ROW = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_IMAGE_HEADER = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_COVAR_USE_AVG = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_AVX = (int)10;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DEPTH_SIGN = (int)-2147483648;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_CN_SHIFT = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DXT_SCALE = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_INDEX = (int)(((4) & ((1 << 3) - 1)) + (((1) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_ORIGIN_BL = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_GRAPH_VERTEX = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_INDEX = (int)((0 << 12) | (((4) & ((1 << 3) - 1)) + (((1) - 1) << 3)));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_HERSHEY_PLAIN = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_ALIGN_4BYTES = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_CONNECTED_COMP = (int)((0 << 12) | 0);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_GRAPH = (int)(1 << 12);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DIFF = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_COVAR_NORMAL = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_BORDER_REFLECT_101 = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DXT_MUL_CONJ = (int)8;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_IMAGE_DATA = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_SIMPLE_POLYGON = (int)((0 << (2 + 12)) | ((1 << (2 + 12)) | ((1 << 12) | (((4) & ((1 << 3) - 1)) + (((2) - 1) << 3)))));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_NONE = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DIFF_L1 = (int)(16 | 2);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DIFF_L2 = (int)(16 | 4);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_KIND_BITS = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_VERTEX = (int)1;
	/**
	 * define<br>
	 * Conversion Error : {  }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:0</i><br>
	 * {  }
	 */
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_PCA_USE_AVG = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_SEQ_SIMPLE = (int)256;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_CN_MAX = (int)512;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_GENERIC = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_STORAGE_WRITE_TEXT = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_SSE = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_STORAGE_APPEND = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_MMX = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_SVD_V_T = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_POINT = (int)(((4) & ((1 << 3) - 1)) + (((2) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_CODE = (int)(((0) & ((1 << 3) - 1)) + (((1) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_HERSHEY_COMPLEX_SMALL = (int)5;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_MASK = (int)((1 << 12) - 1);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_FLAG_SHIFT = (int)(2 + 12);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_BACKTRACKING = (int)64;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_USRTYPE1 = (int)7;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DIFF_C = (int)(16 | 1);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_CHAIN = (int)((1 << 12) | (((0) & ((1 << 3) - 1)) + (((1) - 1) << 3)));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_ALIGN_QWORD = (int)8;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_BORDER_REPLICATE = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_ALL_ITEMS = (int)-1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_KIND_GRAPH = (int)(1 << 12);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MAT_DEPTH_MASK = (int)((1 << 3) - 1);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_RELATIVE_L1 = (int)(8 | 2);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_RELATIVE_L2 = (int)(8 | 4);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_NORMAL = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_TERMCRIT_ITER = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CHECK_RANGE = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_SSE2 = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_SSE3 = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_KIND_BIN_TREE = (int)(2 << 12);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_NEW_TREE = (int)32;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8SC4 = (int)(((1) & ((1 << 3) - 1)) + (((4) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_POINT3D = (int)(((5) & ((1 << 3) - 1)) + (((3) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_ORIENTED_GRAPH = (int)((1 << 12) | (1 << (2 + 12)));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_SORT_DESCENDING = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8SC3 = (int)(((1) & ((1 << 3) - 1)) + (((3) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GEMM_A_T = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8SC2 = (int)(((1) & ((1 << 3) - 1)) + (((2) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_STRING = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8SC1 = (int)(((1) & ((1 << 3) - 1)) + (((1) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_HIST_RANGES_FLAG = (int)(1 << 11);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_STORAGE_WRITE = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8UC1 = (int)(((0) & ((1 << 3) - 1)) + (((1) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8UC4 = (int)(((0) & ((1 << 3) - 1)) + (((4) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8UC2 = (int)(((0) & ((1 << 3) - 1)) + (((2) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8UC3 = (int)(((0) & ((1 << 3) - 1)) + (((3) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_NO_CN_CHECK = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_POINT3D_SET = (int)((0 << 12) | (((5) & ((1 << 3) - 1)) + (((3) - 1) << 3)));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_RELATIVE_C = (int)(8 | 1);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GEMM_C_T = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SUBMAT_FLAG_SHIFT = (int)15;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_HIST_ARRAY = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_FLAG_CONVEX = (int)(0 << (2 + 12));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_RAND_NORMAL = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_SORT_EVERY_ROW = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DATA_ORDER_PLANE = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_WHOLE_SEQ_END_INDEX = (int)1073741823;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_TERMCRIT_EPS = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_COVAR_SCRAMBLED = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SET_ELEM_IDX_MASK = (int)((1 << 26) - 1);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_MAX_ARR = (int)10;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_HERSHEY_TRIPLEX = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_SORT_EVERY_COLUMN = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_FLAG_HOLE = (int)(2 << (2 + 12));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_TREE_EDGE = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_BITS = (int)12;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_DEPTH_MAX = (int)(1 << 3);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DXT_INV_SCALE = (int)(1 + 2);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16SC1 = (int)(((3) & ((1 << 3) - 1)) + (((1) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16SC2 = (int)(((3) & ((1 << 3) - 1)) + (((2) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16SC3 = (int)(((3) & ((1 << 3) - 1)) + (((3) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16SC4 = (int)(((3) & ((1 << 3) - 1)) + (((4) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_NO_DEPTH_CHECK = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_MINMAX = (int)32;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16UC2 = (int)(((2) & ((1 << 3) - 1)) + (((2) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16UC1 = (int)(((2) & ((1 << 3) - 1)) + (((1) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16UC4 = (int)(((2) & ((1 << 3) - 1)) + (((4) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_16UC3 = (int)(((2) & ((1 << 3) - 1)) + (((3) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_BORDER_CONSTANT = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_PPOINT = (int)7;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_CONTOUR = (int)((1 << (2 + 12)) | ((1 << 12) | (((4) & ((1 << 3) - 1)) + (((2) - 1) << 3))));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final String CV_TYPE_NAME_GRAPH = (String)"opencv-graph";
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_REAL = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_POLYGON_TREE = (int)((2 << 12) | 0);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_ITEM_VISITED_FLAG = (int)(1 << 30);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_HIST_UNIFORM_FLAG = (int)(1 << 10);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_PCA_DATA_AS_COL = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_64FC1 = (int)(((6) & ((1 << 3) - 1)) + (((1) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_64FC2 = (int)(((6) & ((1 << 3) - 1)) + (((2) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_HIST_SPARSE = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_64FC3 = (int)(((6) & ((1 << 3) - 1)) + (((3) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_64FC4 = (int)(((6) & ((1 << 3) - 1)) + (((4) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MAT_CN_MASK = (int)((512 - 1) << 3);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_CHAIN_CONTOUR = (int)((1 << (2 + 12)) | ((1 << 12) | (((0) & ((1 << 3) - 1)) + (((1) - 1) << 3))));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32FC4 = (int)(((5) & ((1 << 3) - 1)) + (((4) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32FC2 = (int)(((5) & ((1 << 3) - 1)) + (((2) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_DXT_FORWARD = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32FC3 = (int)(((5) & ((1 << 3) - 1)) + (((3) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32FC1 = (int)(((5) & ((1 << 3) - 1)) + (((1) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_REDUCE_MIN = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MAT_MAGIC_VAL = (int)1111621632;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_EMPTY = (int)32;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MAX_DIM = (int)32;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_COVAR_ROWS = (int)8;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_HIST_UNIFORM = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_FORWARD_EDGE_FLAG = (int)(1 << 28);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_POPCNT = (int)8;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_AA = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32SC2 = (int)(((4) & ((1 << 3) - 1)) + (((2) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32SC1 = (int)(((4) & ((1 << 3) - 1)) + (((1) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_STR = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32SC4 = (int)(((4) & ((1 << 3) - 1)) + (((4) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32SC3 = (int)(((4) & ((1 << 3) - 1)) + (((3) - 1) << 3));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_STORAGE_READ = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_TRIAN_ATR = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SPARSE_MAT_MAGIC_VAL = (int)1111752704;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_HIST_MAGIC_VAL = (int)1111818240;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_BORDER_TRANSPARENT = (int)5;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_GRAPH_ANY_EDGE = (int)30;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_KIND_SUBDIV2D = (int)(2 << 12);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_ErrModeSilent = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final String CV_TYPE_NAME_SEQ_TREE = (String)"opencv-sequence-tree";
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SUBMAT_FLAG = (int)(1 << 15);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CPU_SSSE3 = (int)5;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_NO_SIZE_CHECK = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final String CV_TYPE_NAME_IMAGE = (String)"opencv-image";
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_ErrModeLeaf = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DEPTH_32F = (int)32;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_REDUCE_MAX = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_AUTO_STEP = (int)2147483647;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_STORAGE_MAGIC_VAL = (int)1116274688;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CHOLESKY = (int)3;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DEPTH_32S = (int)(-2147483648 | 32);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_32F = (int)5;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_IMAGE_ROI = (int)4;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_PTR = (int)7;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_ELTYPE_CONNECTED_COMP = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_HERSHEY_SCRIPT_COMPLEX = (int)7;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MAT_CONT_FLAG_SHIFT = (int)14;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_MAP = (int)6;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_HARDWARE_MAX_FEATURE = (int)255;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_MAX_DIM_HEAP = (int)1024;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8S = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_POINT_SET = (int)((0 << 12) | (((4) & ((1 << 3) - 1)) + (((2) - 1) << 3)));
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_HIST_TREE = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_8U = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_AUTOSTEP = (int)2147483647;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_RAND_UNI = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DEPTH_16S = (int)(-2147483648 | 16);
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int IPL_DEPTH_16U = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_FLOW = (int)8;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_SEQ_KIND_MASK = (int)(((1 << 2) - 1) << 12);
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_VECTOR0 = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CMP_EQ = (int)0;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_TERMCRIT_NUMBER = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_NODE_SEQ = (int)5;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_SVD = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CMP_GT = (int)1;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_FONT_ITALIC = (int)16;
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h</i>
	public static final int CV_CMP_GE = (int)2;
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h</i>
	public static final int CV_GRAPH_FLAG_ORIENTED = (int)(1 << (2 + 12));
	/**
	 * type of signal function<br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:185</i>
	 */
	/**
	 * type of signal function<br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:185</i>
	 */
	public interface sig_t extends Callback {
		void apply(int int1);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1921</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1921</i>
	public interface CvIsInstanceFunc extends Callback {
		int apply(Pointer struct_ptr);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1922</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1922</i>
	public interface CvReleaseFunc extends Callback {
		void apply(PointerByReference struct_dblptr);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1923</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1923</i>
	public interface CvReadFunc extends Callback {
		Pointer apply(CxcoreLibrary.CvFileStorage storage, CvFileNode node);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1924</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1924</i>
	public interface CvWriteFunc extends Callback {
		void apply(CxcoreLibrary.CvFileStorage storage, Pointer name, Pointer struct_ptr, CvAttrList.ByValue attributes);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1925</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:1925</i>
	public interface CvCloneFunc extends Callback {
		Pointer apply(Pointer struct_ptr);
	};
	/**
	 * a < b ? -1 : a > b ? 1 : 0<br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:2978</i>
	 */
	/**
	 * a < b ? -1 : a > b ? 1 : 0<br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:2978</i>
	 */
	public interface CvCmpFunc extends Callback {
		int apply(Pointer a, Pointer b, Pointer userdata);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h:3325</i>
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h:3325</i>
	public interface CvAllocFunc extends Callback {
		Pointer apply(NativeSize size, Pointer userdata);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3326</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3326</i>
	public interface CvFreeFunc extends Callback {
		int apply(Pointer pptr, Pointer userdata);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h:3333</i>
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h:3333</i>
	public interface Cv_iplCreateImageHeader extends Callback {
		JNAIplImage apply(int int1, int int2, int int3, Pointer charPtr1, Pointer charPtr2, int int4, int int5, int int6, int int7, int int8, IplROI IplROIPtr1, JNAIplImage IplImagePtr1, Pointer voidPtr1, CxcoreLibrary.IplTileInfo IplTileInfoPtr1);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3334</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3334</i>
	public interface Cv_iplAllocateImageData extends StdCallCallback {
		void apply(JNAIplImage IplImagePtr1, int int1, int int2);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3335</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3335</i>
	public interface Cv_iplDeallocate extends StdCallCallback {
		void apply(JNAIplImage IplImagePtr1, int int1);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h:3336</i>
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h:3336</i>
	public interface Cv_iplCreateROI extends Callback {
		IplROI apply(int int1, int int2, int int3, int int4, int int5);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h:3337</i>
	/// <i>native declaration : modules/core/include/opencv2/core/core_c.h:3337</i>
	public interface Cv_iplCloneImage extends Callback {
		JNAIplImage apply(JNAIplImage IplImagePtr1);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3576</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3576</i>
	public interface CvErrorCallback extends Callback {
		int apply(int status, Pointer func_name, Pointer err_msg, Pointer file_name, int line, Pointer userdata);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3873</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:3873</i>
	public interface CvDistanceFunction extends Callback {
		float apply(FloatByReference a, FloatByReference b, Pointer user_param);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4646</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4646</i>
	public interface CvButtonCallback extends Callback {
		void apply(int state, Pointer userdata);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4733</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4733</i>
	public interface CvTrackbarCallback extends Callback {
		void apply(int pos);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4739</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4739</i>
	public interface CvTrackbarCallback2 extends Callback {
		void apply(int pos, Pointer userdata);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4769</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4769</i>
	public interface CvMouseCallback extends Callback {
		void apply(int event, int x, int y, int flags, Pointer param);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4840</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:4840</i>
	public interface CvOpenGlDrawCallback extends Callback {
		void apply(Pointer userdata);
	};
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:5505</i>
	/// <i>native declaration : modules/core/include/opencv2/core/types_c.h:5505</i>
	public interface signal_callback extends Callback {
		void apply(int int1);
	};
	/**
	 * Original signature : <code>int cvRound(double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1323</i>
	 */
	int cvRound(double value);
	/**
	 * Original signature : <code>int cvFloor(double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1328</i>
	 */
	int cvFloor(double value);
	/**
	 * Original signature : <code>int cvCeil(double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1333</i>
	 */
	int cvCeil(double value);
	/**
	 * Original signature : <code>int cvIsNaN(double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1339</i>
	 */
	int cvIsNaN(double value);
	/**
	 * Original signature : <code>int cvIsInf(double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1345</i>
	 */
	int cvIsInf(double value);
	/**
	 * Original signature : <code>CvRNG cvRNG(int64)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1351</i>
	 */
	long cvRNG(long seed);
	/**
	 * Return random 32-bit unsigned integer:<br>
	 * Original signature : <code>int cvRandInt(CvRNG*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1361</i><br>
	 * @deprecated use the safer methods {@link #cvRandInt(java.nio.LongBuffer)} and {@link #cvRandInt(com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated
	int cvRandInt(LongByReference rng);
	/**
	 * Return random 32-bit unsigned integer:<br>
	 * Original signature : <code>int cvRandInt(CvRNG*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1361</i>
	 */
	int cvRandInt(LongBuffer rng);
	/**
	 * Returns random floating-point number between 0 and 1:<br>
	 * Original signature : <code>double cvRandReal(CvRNG*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1368</i><br>
	 * @deprecated use the safer methods {@link #cvRandReal(java.nio.LongBuffer)} and {@link #cvRandReal(com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated
	double cvRandReal(LongByReference rng);
	/**
	 * Returns random floating-point number between 0 and 1:<br>
	 * Original signature : <code>double cvRandReal(CvRNG*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1368</i>
	 */
	double cvRandReal(LongBuffer rng);
	/**
	 * Inline constructor. No data is allocated internally!!!<br>
	 * (Use together with cvCreateData, or use cvCreateMat instead to<br>
	 * get a matrix with allocated data):<br>
	 * Original signature : <code>CvMat cvMat(int, int, int, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1459</i>
	 */
	CvMat.ByValue cvMat(int rows, int cols, int type, Pointer data);
	/**
	 * Original signature : <code>double cvmGet(const CvMat*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1471</i>
	 */
	double cvmGet(CvMat mat, int row, int col);
	/**
	 * Original signature : <code>void cvmSet(CvMat*, int, int, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1483</i>
	 */
	void cvmSet(CvMat mat, int row, int col, double value);
	/**
	 * Original signature : <code>int cvIplDepth(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1488</i>
	 */
	int cvIplDepth(int type);
	/**
	 * Original signature : <code>CvRect cvRect(int, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1552</i>
	 */
	sj.opencv.jna.cxcore.CvRect.ByValue cvRect(int x, int y, int width, int height);
	/**
	 * Original signature : <code>IplROI cvRectToROI(CvRect, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1562</i>
	 */
	IplROI.ByValue cvRectToROI(sj.opencv.jna.cxcore.CvRect.ByValue rect, int coi);
	/**
	 * Original signature : <code>CvRect cvROIToRect(IplROI)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1566</i>
	 */
	sj.opencv.jna.cxcore.CvRect.ByValue cvROIToRect(IplROI.ByValue roi);
	/**
	 * Original signature : <code>CvTermCriteria cvTermCriteria(int, int, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1581</i>
	 */
	sj.opencv.jna.cxcore.CvTermCriteria.ByValue cvTermCriteria(int type, int max_iter, double epsilon);
	/**
	 * Original signature : <code>CvPoint cvPoint(int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1592</i>
	 */
	CvPoint.ByValue cvPoint(int x, int y);
	/**
	 * Original signature : <code>CvPoint2D32f cvPoint2D32f(double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1603</i>
	 */
	sj.opencv.jna.cxcore.CvPoint2D32f.ByValue cvPoint2D32f(double x, double y);
	/**
	 * Original signature : <code>CvPoint2D32f cvPointTo32f(CvPoint)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1607</i>
	 */
	sj.opencv.jna.cxcore.CvPoint2D32f.ByValue cvPointTo32f(CvPoint.ByValue point);
	/**
	 * Original signature : <code>CvPoint cvPointFrom32f(CvPoint2D32f)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1614</i>
	 */
	CvPoint.ByValue cvPointFrom32f(sj.opencv.jna.cxcore.CvPoint2D32f.ByValue point);
	/**
	 * Original signature : <code>CvPoint3D32f cvPoint3D32f(double, double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1627</i>
	 */
	sj.opencv.jna.cxcore.CvPoint3D32f.ByValue cvPoint3D32f(double x, double y, double z);
	/**
	 * Original signature : <code>CvPoint2D64f cvPoint2D64f(double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1638</i>
	 */
	sj.opencv.jna.cxcore.CvPoint2D64f.ByValue cvPoint2D64f(double x, double y);
	/**
	 * Original signature : <code>CvPoint3D64f cvPoint3D64f(double, double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1651</i>
	 */
	sj.opencv.jna.cxcore.CvPoint3D64f.ByValue cvPoint3D64f(double x, double y, double z);
	/**
	 * Original signature : <code>CvSize cvSize(int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1662</i>
	 */
	CvSize.ByValue cvSize(int width, int height);
	/**
	 * Original signature : <code>CvSize2D32f cvSize2D32f(double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1673</i>
	 */
	sj.opencv.jna.cxcore.CvSize2D32f.ByValue cvSize2D32f(double width, double height);
	/**
	 * Original signature : <code>CvSlice cvSlice(int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1700</i>
	 */
	sj.opencv.jna.cxcore.CvSlice.ByValue cvSlice(int start, int end);
	/**
	 * Original signature : <code>CvScalar cvScalar(double, double, double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1712</i>
	 */
	CvScalar.ByValue cvScalar(double val0, double val1, double val2, double val3);
	/**
	 * Original signature : <code>CvScalar cvRealScalar(double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1719</i>
	 */
	CvScalar.ByValue cvRealScalar(double val0);
	/**
	 * Original signature : <code>CvScalar cvScalarAll(double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1728</i>
	 */
	CvScalar.ByValue cvScalarAll(double val0123);
	/**
	 * Original signature : <code>CvAttrList cvAttrList(const char**, CvAttrList*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1891</i><br>
	 * @deprecated use the safer methods {@link #cvAttrList(java.lang.String[], sj.opencv.jna.cxcore.CvAttrList)} and {@link #cvAttrList(com.sun.jna.ptr.PointerByReference, sj.opencv.jna.cxcore.CvAttrList)} instead
	 */
	@Deprecated
	CvAttrList.ByValue cvAttrList(PointerByReference attr, CvAttrList next);
	/**
	 * Original signature : <code>CvAttrList cvAttrList(const char**, CvAttrList*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1891</i>
	 */
	CvAttrList.ByValue cvAttrList(String attr[], CvAttrList next);
	/**
	 * <malloc> wrapper.<br>
	 * If there is no enough memory, the function<br>
	 * (as well as other OpenCV functions that call cvAlloc)<br>
	 * raises an error.<br>
	 * Original signature : <code>void* cvAlloc(size_t)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1958</i>
	 */
	Pointer cvAlloc(NativeSize size);
	/**
	 * <free> wrapper.<br>
	 * Here and further all the memory releasing functions<br>
	 * (that all call cvFree) take double pointer in order to<br>
	 * to clear pointer to the data after releasing it.<br>
	 * Passing pointer to NULL pointer is Ok: nothing happens in this case<br>
	 * Original signature : <code>void cvFree_(void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1967</i>
	 */
	void cvFree_(Pointer ptr);
	/**
	 * Allocates and initializes IplImage header<br>
	 * Original signature : <code>IplImage* cvCreateImageHeader(CvSize, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1972</i>
	 */
	JNAIplImage cvCreateImageHeader(CvSize.ByValue size, int depth, int channels);
	/**
	 * Inializes IplImage header<br>
	 * Original signature : <code>IplImage* cvInitImageHeader(IplImage*, CvSize, int, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1977</i>
	 */
	JNAIplImage cvInitImageHeader(JNAIplImage image, CvSize.ByValue size, int depth, int channels, int origin, int align);
	/**
	 * Creates IPL image (header and data)<br>
	 * Original signature : <code>IplImage* cvCreateImage(CvSize, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1982</i>
	 */
	JNAIplImage cvCreateImage(CvSize.ByValue size, int depth, int channels);
	/**
	 * Releases (i.e. deallocates) IPL image header<br>
	 * Original signature : <code>void cvReleaseImageHeader(IplImage**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1987</i><br>
	 * @deprecated use the safer method {@link #cvReleaseImageHeader(sj.opencv.jna.cxcore.JNAIplImage.ByReference[])} instead
	 */
	@Deprecated
	void cvReleaseImageHeader(PointerByReference image);
	/**
	 * Releases (i.e. deallocates) IPL image header<br>
	 * Original signature : <code>void cvReleaseImageHeader(IplImage**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1987</i>
	 */
	void cvReleaseImageHeader(JNAIplImage.ByReference image[]);
	/**
	 * Releases IPL image header and data<br>
	 * Original signature : <code>void cvReleaseImage(IplImage**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1992</i><br>
	 * @deprecated use the safer method {@link #cvReleaseImage(sj.opencv.jna.cxcore.JNAIplImage.ByReference[])} instead
	 */
	@Deprecated
	void cvReleaseImage(PointerByReference image);
	/**
	 * Releases IPL image header and data<br>
	 * Original signature : <code>void cvReleaseImage(IplImage**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1992</i>
	 */
	void cvReleaseImage(JNAIplImage.ByReference image[]);
	/**
	 * Creates a copy of IPL image (widthStep may differ)<br>
	 * Original signature : <code>IplImage* cvCloneImage(const IplImage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:1997</i>
	 */
	JNAIplImage cvCloneImage(JNAIplImage image);
	/**
	 * Sets a Channel Of Interest (only a few functions support COI) -<br>
	 * use cvCopy to extract the selected channel and/or put it back<br>
	 * Original signature : <code>void cvSetImageCOI(IplImage*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2003</i>
	 */
	void cvSetImageCOI(JNAIplImage image, int coi);
	/**
	 * Retrieves image Channel Of Interest<br>
	 * Original signature : <code>int cvGetImageCOI(const IplImage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2008</i>
	 */
	int cvGetImageCOI(JNAIplImage image);
	/**
	 * Sets image ROI (region of interest) (COI is not changed)<br>
	 * Original signature : <code>void cvSetImageROI(IplImage*, CvRect)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2013</i>
	 */
	void cvSetImageROI(JNAIplImage image, sj.opencv.jna.cxcore.CvRect.ByValue rect);
	/**
	 * Resets image ROI and COI<br>
	 * Original signature : <code>void cvResetImageROI(IplImage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2018</i>
	 */
	void cvResetImageROI(JNAIplImage image);
	/**
	 * Retrieves image ROI<br>
	 * Original signature : <code>CvRect cvGetImageROI(const IplImage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2023</i>
	 */
	sj.opencv.jna.cxcore.CvRect.ByValue cvGetImageROI(JNAIplImage image);
	/**
	 * Allocates and initalizes CvMat header<br>
	 * Original signature : <code>CvMat* cvCreateMatHeader(int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2028</i>
	 */
	CvMat cvCreateMatHeader(int rows, int cols, int type);
	/**
	 * Initializes CvMat header<br>
	 * Original signature : <code>CvMat* cvInitMatHeader(CvMat*, int, int, int, void*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2033</i>
	 */
	CvMat cvInitMatHeader(CvMat mat, int rows, int cols, int type, Pointer data, int step);
	/**
	 * Allocates and initializes CvMat header and allocates data<br>
	 * Original signature : <code>CvMat* cvCreateMat(int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2038</i>
	 */
	CvMat cvCreateMat(int rows, int cols, int type);
	/**
	 * Releases CvMat header and deallocates matrix data<br>
	 * (reference counting is used for data)<br>
	 * Original signature : <code>void cvReleaseMat(CvMat**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2044</i><br>
	 * @deprecated use the safer method {@link #cvReleaseMat(sj.opencv.jna.cxcore.CvMat.ByReference[])} instead
	 */
	@Deprecated
	void cvReleaseMat(PointerByReference mat);
	/**
	 * Releases CvMat header and deallocates matrix data<br>
	 * (reference counting is used for data)<br>
	 * Original signature : <code>void cvReleaseMat(CvMat**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2044</i>
	 */
	void cvReleaseMat(CvMat.ByReference mat[]);
	/**
	 * Decrements CvMat data reference counter and deallocates the data if<br>
	 * it reaches 0<br>
	 * Original signature : <code>void cvDecRefData(CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2065</i>
	 */
	void cvDecRefData(CvArr arr);
	/**
	 * Increments CvMat data reference counter<br>
	 * Original signature : <code>int cvIncRefData(CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2083</i>
	 */
	int cvIncRefData(CvArr arr);
	/**
	 * Creates an exact copy of the input matrix (except, may be, step value)<br>
	 * Original signature : <code>CvMat* cvCloneMat(const CvMat*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2088</i>
	 */
	CvMat cvCloneMat(CvMat mat);
	/**
	 * Makes a new matrix from <rect> subrectangle of input array.<br>
	 * No data is copied<br>
	 * Original signature : <code>CvMat* cvGetSubRect(const CvArr*, CvMat*, CvRect)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2094</i>
	 */
	CvMat cvGetSubRect(CvArr arr, CvMat submat, sj.opencv.jna.cxcore.CvRect.ByValue rect);
	/**
	 * Selects row span of the input array: arr(start_row:delta_row:end_row,:)<br>
	 * (end_row is not included into the span).<br>
	 * Original signature : <code>CvMat* cvGetRows(const CvArr*, CvMat*, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2100</i>
	 */
	CvMat cvGetRows(CvArr arr, CvMat submat, int start_row, int end_row, int delta_row);
	/**
	 * Original signature : <code>CvMat* cvGetRow(const CvArr*, CvMat*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2104</i>
	 */
	CvMat cvGetRow(CvArr arr, CvMat submat, int row);
	/**
	 * Selects column span of the input array: arr(:,start_col:end_col)<br>
	 * (end_col is not included into the span)<br>
	 * Original signature : <code>CvMat* cvGetCols(const CvArr*, CvMat*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2110</i>
	 */
	CvMat cvGetCols(CvArr arr, CvMat submat, int start_col, int end_col);
	/**
	 * Original signature : <code>CvMat* cvGetCol(const CvArr*, CvMat*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2114</i>
	 */
	CvMat cvGetCol(CvArr arr, CvMat submat, int col);
	/**
	 * Select a diagonal of the input array.<br>
	 * (diag = 0 means the main diagonal, >0 means a diagonal above the main one,<br>
	 * <0 - below the main one).<br>
	 * The diagonal will be represented as a column (nx1 matrix).<br>
	 * Original signature : <code>CvMat* cvGetDiag(const CvArr*, CvMat*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2122</i>
	 */
	CvMat cvGetDiag(CvArr arr, CvMat submat, int diag);
	/**
	 * low-level scalar <-> raw data conversion functions<br>
	 * Original signature : <code>void cvScalarToRawData(const CvScalar*, void*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2127</i>
	 */
	void cvScalarToRawData(CvScalar scalar, Pointer data, int type, int extend_to_12);
	/**
	 * Original signature : <code>void cvRawDataToScalar(const void*, int, CvScalar*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2129</i>
	 */
	void cvRawDataToScalar(Pointer data, int type, CvScalar scalar);
	/**
	 * Allocates and initializes CvMatND header<br>
	 * Original signature : <code>CvMatND* cvCreateMatNDHeader(int, const int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2134</i><br>
	 * @deprecated use the safer methods {@link #cvCreateMatNDHeader(int, int[], int)} and {@link #cvCreateMatNDHeader(int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated
	CvMatND cvCreateMatNDHeader(int dims, IntByReference sizes, int type);
	/**
	 * Allocates and initializes CvMatND header<br>
	 * Original signature : <code>CvMatND* cvCreateMatNDHeader(int, const int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2134</i>
	 */
	CvMatND cvCreateMatNDHeader(int dims, int sizes[], int type);
	/**
	 * Allocates and initializes CvMatND header and allocates data<br>
	 * Original signature : <code>CvMatND* cvCreateMatND(int, const int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2139</i><br>
	 * @deprecated use the safer methods {@link #cvCreateMatND(int, int[], int)} and {@link #cvCreateMatND(int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated
	CvMatND cvCreateMatND(int dims, IntByReference sizes, int type);
	/**
	 * Allocates and initializes CvMatND header and allocates data<br>
	 * Original signature : <code>CvMatND* cvCreateMatND(int, const int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2139</i>
	 */
	CvMatND cvCreateMatND(int dims, int sizes[], int type);
	/**
	 * Initializes preallocated CvMatND header<br>
	 * Original signature : <code>CvMatND* cvInitMatNDHeader(CvMatND*, int, const int*, int, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2144</i><br>
	 * @deprecated use the safer methods {@link #cvInitMatNDHeader(sj.opencv.jna.cxcore.CvMatND, int, int[], int, com.sun.jna.Pointer)} and {@link #cvInitMatNDHeader(sj.opencv.jna.cxcore.CvMatND, int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	CvMatND cvInitMatNDHeader(CvMatND mat, int dims, IntByReference sizes, int type, Pointer data);
	/**
	 * Initializes preallocated CvMatND header<br>
	 * Original signature : <code>CvMatND* cvInitMatNDHeader(CvMatND*, int, const int*, int, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2144</i>
	 */
	CvMatND cvInitMatNDHeader(CvMatND mat, int dims, int sizes[], int type, Pointer data);
	/**
	 * Releases CvMatND<br>
	 * Original signature : <code>void cvReleaseMatND(CvMatND**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2151</i><br>
	 * @deprecated use the safer method {@link #cvReleaseMatND(sj.opencv.jna.cxcore.CvMatND.ByReference[])} instead
	 */
	@Deprecated
	void cvReleaseMatND(PointerByReference mat);
	/**
	 * Releases CvMatND<br>
	 * Original signature : <code>void cvReleaseMatND(CvMatND**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2151</i>
	 */
	void cvReleaseMatND(CvMatND.ByReference mat[]);
	/**
	 * Creates a copy of CvMatND (except, may be, steps)<br>
	 * Original signature : <code>CvMatND* cvCloneMatND(const CvMatND*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2156</i>
	 */
	CvMatND cvCloneMatND(CvMatND mat);
	/**
	 * Allocates and initializes CvSparseMat header and allocates data<br>
	 * Original signature : <code>CvSparseMat* cvCreateSparseMat(int, const int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2161</i><br>
	 * @deprecated use the safer methods {@link #cvCreateSparseMat(int, int[], int)} and {@link #cvCreateSparseMat(int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated
	CvSparseMat cvCreateSparseMat(int dims, IntByReference sizes, int type);
	/**
	 * Allocates and initializes CvSparseMat header and allocates data<br>
	 * Original signature : <code>CvSparseMat* cvCreateSparseMat(int, const int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2161</i>
	 */
	CvSparseMat cvCreateSparseMat(int dims, int sizes[], int type);
	/**
	 * Releases CvSparseMat<br>
	 * Original signature : <code>void cvReleaseSparseMat(CvSparseMat**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2166</i><br>
	 * @deprecated use the safer method {@link #cvReleaseSparseMat(sj.opencv.jna.cxcore.CvSparseMat.ByReference[])} instead
	 */
	@Deprecated
	void cvReleaseSparseMat(PointerByReference mat);
	/**
	 * Releases CvSparseMat<br>
	 * Original signature : <code>void cvReleaseSparseMat(CvSparseMat**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2166</i>
	 */
	void cvReleaseSparseMat(CvSparseMat.ByReference mat[]);
	/**
	 * Creates a copy of CvSparseMat (except, may be, zero items)<br>
	 * Original signature : <code>CvSparseMat* cvCloneSparseMat(const CvSparseMat*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2171</i>
	 */
	CvSparseMat cvCloneSparseMat(CvSparseMat mat);
	/**
	 * Initializes sparse array iterator<br>
	 * (returns the first node or NULL if the array is empty)<br>
	 * Original signature : <code>CvSparseNode* cvInitSparseMatIterator(const CvSparseMat*, CvSparseMatIterator*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2177</i>
	 */
	CvSparseNode cvInitSparseMatIterator(CvSparseMat mat, CvSparseMatIterator mat_iterator);
	/**
	 * returns next sparse array node (or NULL if there is no more nodes)<br>
	 * Original signature : <code>CvSparseNode* cvGetNextSparseNode(CvSparseMatIterator*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2189</i>
	 */
	CvSparseNode cvGetNextSparseNode(CvSparseMatIterator mat_iterator);
	/**
	 * initializes iterator that traverses through several arrays simulteneously<br>
	 * (the function together with cvNextArraySlice is used for<br>
	 * N-ari element-wise operations)<br>
	 * Original signature : <code>int cvInitNArrayIterator(int, CvArr**, const CvArr*, CvMatND*, CvNArrayIterator*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2205</i>
	 */
	int cvInitNArrayIterator(int count, PointerByReference arrs, CvArr mask, CvMatND stubs, CvNArrayIterator array_iterator, int flags);
	/**
	 * returns zero value if iteration is finished, non-zero (slice length) otherwise<br>
	 * Original signature : <code>int cvNextNArraySlice(CvNArrayIterator*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2210</i>
	 */
	int cvNextNArraySlice(CvNArrayIterator array_iterator);
	/**
	 * Returns type of array elements:<br>
	 * CV_8UC1 ... CV_64FC4 ...<br>
	 * Original signature : <code>int cvGetElemType(const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2216</i>
	 */
	int cvGetElemType(CvArr arr);
	/**
	 * Retrieves number of an array dimensions and<br>
	 * optionally sizes of the dimensions<br>
	 * Original signature : <code>int cvGetDims(const CvArr*, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2222</i><br>
	 * @deprecated use the safer methods {@link #cvGetDims(sj.opencv.jna.highgui.HighguiLibrary.CvArr, java.nio.IntBuffer)} and {@link #cvGetDims(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	int cvGetDims(CvArr arr, IntByReference sizes);
	/**
	 * Retrieves number of an array dimensions and<br>
	 * optionally sizes of the dimensions<br>
	 * Original signature : <code>int cvGetDims(const CvArr*, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2222</i>
	 */
	int cvGetDims(CvArr arr, IntBuffer sizes);
	/**
	 * Retrieves size of a particular array dimension.<br>
	 * For 2d arrays cvGetDimSize(arr,0) returns number of rows (image height)<br>
	 * and cvGetDimSize(arr,1) returns number of columns (image width)<br>
	 * Original signature : <code>int cvGetDimSize(const CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2229</i>
	 */
	int cvGetDimSize(CvArr arr, int index);
	/**
	 * ptr = &arr(idx0,idx1,...). All indexes are zero-based,<br>
	 * the major dimensions go first (e.g. (y,x) for 2D, (z,y,x) for 3D<br>
	 * Original signature : <code>uchar* cvPtr1D(const CvArr*, int, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2235</i><br>
	 * @deprecated use the safer methods {@link #cvPtr1D(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, java.nio.IntBuffer)} and {@link #cvPtr1D(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	Pointer cvPtr1D(CvArr arr, int idx0, IntByReference type);
	/**
	 * ptr = &arr(idx0,idx1,...). All indexes are zero-based,<br>
	 * the major dimensions go first (e.g. (y,x) for 2D, (z,y,x) for 3D<br>
	 * Original signature : <code>uchar* cvPtr1D(const CvArr*, int, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2235</i>
	 */
	Pointer cvPtr1D(CvArr arr, int idx0, IntBuffer type);
	/**
	 * Original signature : <code>uchar* cvPtr2D(const CvArr*, int, int, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2237</i><br>
	 * @deprecated use the safer methods {@link #cvPtr2D(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, int, java.nio.IntBuffer)} and {@link #cvPtr2D(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	Pointer cvPtr2D(CvArr arr, int idx0, int idx1, IntByReference type);
	/**
	 * Original signature : <code>uchar* cvPtr2D(const CvArr*, int, int, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2237</i>
	 */
	Pointer cvPtr2D(CvArr arr, int idx0, int idx1, IntBuffer type);
	/**
	 * Original signature : <code>uchar* cvPtr3D(const CvArr*, int, int, int, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2239</i><br>
	 * @deprecated use the safer methods {@link #cvPtr3D(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, int, int, java.nio.IntBuffer)} and {@link #cvPtr3D(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	Pointer cvPtr3D(CvArr arr, int idx0, int idx1, int idx2, IntByReference type);
	/**
	 * Original signature : <code>uchar* cvPtr3D(const CvArr*, int, int, int, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2239</i>
	 */
	Pointer cvPtr3D(CvArr arr, int idx0, int idx1, int idx2, IntBuffer type);
	/**
	 * For CvMat or IplImage number of indices should be 2<br>
	 * (row index (y) goes first, column index (x) goes next).<br>
	 * For CvMatND or CvSparseMat number of infices should match number of <dims> and<br>
	 * indices order should match the array dimension order.<br>
	 * Original signature : <code>uchar* cvPtrND(const CvArr*, const int*, int*, int, unsigned*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2247</i><br>
	 * @deprecated use the safer methods {@link #cvPtrND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int[], java.nio.IntBuffer, int, java.nio.IntBuffer)} and {@link #cvPtrND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	Pointer cvPtrND(CvArr arr, IntByReference idx, IntByReference type, int create_node, IntByReference precalc_hashval);
	/**
	 * For CvMat or IplImage number of indices should be 2<br>
	 * (row index (y) goes first, column index (x) goes next).<br>
	 * For CvMatND or CvSparseMat number of infices should match number of <dims> and<br>
	 * indices order should match the array dimension order.<br>
	 * Original signature : <code>uchar* cvPtrND(const CvArr*, const int*, int*, int, unsigned*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2247</i>
	 */
	Pointer cvPtrND(CvArr arr, int idx[], IntBuffer type, int create_node, IntBuffer precalc_hashval);
	/**
	 * value = arr(idx0,idx1,...)<br>
	 * Original signature : <code>CvScalar cvGet1D(const CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2252</i>
	 */
	CvScalar.ByValue cvGet1D(CvArr arr, int idx0);
	/**
	 * Original signature : <code>CvScalar cvGet2D(const CvArr*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2254</i>
	 */
	CvScalar.ByValue cvGet2D(CvArr arr, int idx0, int idx1);
	/**
	 * Original signature : <code>CvScalar cvGet3D(const CvArr*, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2256</i>
	 */
	CvScalar.ByValue cvGet3D(CvArr arr, int idx0, int idx1, int idx2);
	/**
	 * Original signature : <code>CvScalar cvGetND(const CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2258</i><br>
	 * @deprecated use the safer methods {@link #cvGetND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int[])} and {@link #cvGetND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	CvScalar.ByValue cvGetND(CvArr arr, IntByReference idx);
	/**
	 * Original signature : <code>CvScalar cvGetND(const CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2258</i>
	 */
	CvScalar.ByValue cvGetND(CvArr arr, int idx[]);
	/**
	 * for 1-channel arrays<br>
	 * Original signature : <code>double cvGetReal1D(const CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2263</i>
	 */
	double cvGetReal1D(CvArr arr, int idx0);
	/**
	 * Original signature : <code>double cvGetReal2D(const CvArr*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2265</i>
	 */
	double cvGetReal2D(CvArr arr, int idx0, int idx1);
	/**
	 * Original signature : <code>double cvGetReal3D(const CvArr*, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2267</i>
	 */
	double cvGetReal3D(CvArr arr, int idx0, int idx1, int idx2);
	/**
	 * Original signature : <code>double cvGetRealND(const CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2269</i><br>
	 * @deprecated use the safer methods {@link #cvGetRealND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int[])} and {@link #cvGetRealND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	double cvGetRealND(CvArr arr, IntByReference idx);
	/**
	 * Original signature : <code>double cvGetRealND(const CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2269</i>
	 */
	double cvGetRealND(CvArr arr, int idx[]);
	/**
	 * arr(idx0,idx1,...) = value<br>
	 * Original signature : <code>void cvSet1D(CvArr*, int, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2274</i>
	 */
	void cvSet1D(CvArr arr, int idx0, CvScalar.ByValue value);
	/**
	 * Original signature : <code>void cvSet2D(CvArr*, int, int, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2276</i>
	 */
	void cvSet2D(CvArr arr, int idx0, int idx1, CvScalar.ByValue value);
	/**
	 * Original signature : <code>void cvSet3D(CvArr*, int, int, int, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2278</i>
	 */
	void cvSet3D(CvArr arr, int idx0, int idx1, int idx2, CvScalar.ByValue value);
	/**
	 * Original signature : <code>void cvSetND(CvArr*, const int*, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2280</i><br>
	 * @deprecated use the safer methods {@link #cvSetND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int[], sj.opencv.jna.cxcore.CvScalar.ByValue)} and {@link #cvSetND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference, sj.opencv.jna.cxcore.CvScalar.ByValue)} instead
	 */
	@Deprecated
	void cvSetND(CvArr arr, IntByReference idx, CvScalar.ByValue value);
	/**
	 * Original signature : <code>void cvSetND(CvArr*, const int*, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2280</i>
	 */
	void cvSetND(CvArr arr, int idx[], CvScalar.ByValue value);
	/**
	 * for 1-channel arrays<br>
	 * Original signature : <code>void cvSetReal1D(CvArr*, int, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2285</i>
	 */
	void cvSetReal1D(CvArr arr, int idx0, double value);
	/**
	 * Original signature : <code>void cvSetReal2D(CvArr*, int, int, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2287</i>
	 */
	void cvSetReal2D(CvArr arr, int idx0, int idx1, double value);
	/**
	 * Original signature : <code>void cvSetReal3D(CvArr*, int, int, int, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2289</i>
	 */
	void cvSetReal3D(CvArr arr, int idx0, int idx1, int idx2, double value);
	/**
	 * Original signature : <code>void cvSetRealND(CvArr*, const int*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2291</i><br>
	 * @deprecated use the safer methods {@link #cvSetRealND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int[], double)} and {@link #cvSetRealND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference, double)} instead
	 */
	@Deprecated
	void cvSetRealND(CvArr arr, IntByReference idx, double value);
	/**
	 * Original signature : <code>void cvSetRealND(CvArr*, const int*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2291</i>
	 */
	void cvSetRealND(CvArr arr, int idx[], double value);
	/**
	 * clears element of ND dense array,<br>
	 * in case of sparse arrays it deletes the specified node<br>
	 * Original signature : <code>void cvClearND(CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2297</i><br>
	 * @deprecated use the safer methods {@link #cvClearND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int[])} and {@link #cvClearND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	void cvClearND(CvArr arr, IntByReference idx);
	/**
	 * clears element of ND dense array,<br>
	 * in case of sparse arrays it deletes the specified node<br>
	 * Original signature : <code>void cvClearND(CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2297</i>
	 */
	void cvClearND(CvArr arr, int idx[]);
	/**
	 * Converts CvArr (IplImage or CvMat,...) to CvMat.<br>
	 * If the last parameter is non-zero, function can<br>
	 * convert multi(>2)-dimensional array to CvMat as long as<br>
	 * the last array's dimension is continous. The resultant<br>
	 * matrix will be have appropriate (a huge) number of rows<br>
	 * Original signature : <code>CvMat* cvGetMat(const CvArr*, CvMat*, int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2306</i><br>
	 * @deprecated use the safer methods {@link #cvGetMat(sj.opencv.jna.highgui.HighguiLibrary.CvArr, sj.opencv.jna.cxcore.CvMat, java.nio.IntBuffer, int)} and {@link #cvGetMat(sj.opencv.jna.highgui.HighguiLibrary.CvArr, sj.opencv.jna.cxcore.CvMat, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated
	CvMat cvGetMat(CvArr arr, CvMat header, IntByReference coi, int allowND);
	/**
	 * Converts CvArr (IplImage or CvMat,...) to CvMat.<br>
	 * If the last parameter is non-zero, function can<br>
	 * convert multi(>2)-dimensional array to CvMat as long as<br>
	 * the last array's dimension is continous. The resultant<br>
	 * matrix will be have appropriate (a huge) number of rows<br>
	 * Original signature : <code>CvMat* cvGetMat(const CvArr*, CvMat*, int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2306</i>
	 */
	CvMat cvGetMat(CvArr arr, CvMat header, IntBuffer coi, int allowND);
	/**
	 * Converts CvArr (IplImage or CvMat) to IplImage<br>
	 * Original signature : <code>IplImage* cvGetImage(const CvArr*, IplImage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2311</i>
	 */
	JNAIplImage cvGetImage(CvArr arr, JNAIplImage image_header);
	/**
	 * Changes a shape of multi-dimensional array.<br>
	 * new_cn == 0 means that number of channels remains unchanged.<br>
	 * new_dims == 0 means that number and sizes of dimensions remain the same<br>
	 * (unless they need to be changed to set the new number of channels)<br>
	 * if new_dims == 1, there is no need to specify new dimension sizes<br>
	 * The resultant configuration should be achievable w/o data copying.<br>
	 * If the resultant array is sparse, CvSparseMat header should be passed<br>
	 * to the function else if the result is 1 or 2 dimensional,<br>
	 * CvMat header should be passed to the function<br>
	 * else CvMatND header should be passed<br>
	 * Original signature : <code>CvArr* cvReshapeMatND(const CvArr*, int, CvArr*, int, int, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2325</i><br>
	 * @deprecated use the safer methods {@link #cvReshapeMatND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, int, java.nio.IntBuffer)} and {@link #cvReshapeMatND(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	Pointer cvReshapeMatND(CvArr arr, int sizeof_header, CvArr header, int new_cn, int new_dims, IntByReference new_sizes);
	/**
	 * Changes a shape of multi-dimensional array.<br>
	 * new_cn == 0 means that number of channels remains unchanged.<br>
	 * new_dims == 0 means that number and sizes of dimensions remain the same<br>
	 * (unless they need to be changed to set the new number of channels)<br>
	 * if new_dims == 1, there is no need to specify new dimension sizes<br>
	 * The resultant configuration should be achievable w/o data copying.<br>
	 * If the resultant array is sparse, CvSparseMat header should be passed<br>
	 * to the function else if the result is 1 or 2 dimensional,<br>
	 * CvMat header should be passed to the function<br>
	 * else CvMatND header should be passed<br>
	 * Original signature : <code>CvArr* cvReshapeMatND(const CvArr*, int, CvArr*, int, int, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2325</i>
	 */
	Pointer cvReshapeMatND(CvArr arr, int sizeof_header, CvArr header, int new_cn, int new_dims, IntBuffer new_sizes);
	/**
	 * Original signature : <code>CvMat* cvReshape(const CvArr*, CvMat*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2327</i>
	 */
	CvMat cvReshape(CvArr arr, CvMat header, int new_cn, int new_rows);
	/**
	 * Repeats source 2d array several times in both horizontal and<br>
	 * vertical direction to fill destination array<br>
	 * Original signature : <code>void cvRepeat(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2333</i>
	 */
	void cvRepeat(CvArr src, CvArr dst);
	/**
	 * Allocates array data<br>
	 * Original signature : <code>void cvCreateData(CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2338</i>
	 */
	void cvCreateData(CvArr arr);
	/**
	 * Releases array data<br>
	 * Original signature : <code>void cvReleaseData(CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2343</i>
	 */
	void cvReleaseData(CvArr arr);
	/**
	 * Attaches user data to the array header. The step is reffered to<br>
	 * the pre-last dimension. That is, all the planes of the array<br>
	 * must be joint (w/o gaps)<br>
	 * Original signature : <code>void cvSetData(CvArr*, void*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2350</i>
	 */
	void cvSetData(CvArr arr, Pointer data, int step);
	/**
	 * Retrieves raw data of CvMat, IplImage or CvMatND.<br>
	 * In the latter case the function raises an error if<br>
	 * the array can not be represented as a matrix<br>
	 * Original signature : <code>void cvGetRawData(const CvArr*, uchar**, int*, CvSize*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2357</i><br>
	 * @deprecated use the safer methods {@link #cvGetRawData(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, sj.opencv.jna.cxcore.CvSize)} and {@link #cvGetRawData(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, sj.opencv.jna.cxcore.CvSize)} instead
	 */
	@Deprecated
	void cvGetRawData(CvArr arr, PointerByReference data, IntByReference step, CvSize roi_size);
	/**
	 * Retrieves raw data of CvMat, IplImage or CvMatND.<br>
	 * In the latter case the function raises an error if<br>
	 * the array can not be represented as a matrix<br>
	 * Original signature : <code>void cvGetRawData(const CvArr*, uchar**, int*, CvSize*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2357</i>
	 */
	void cvGetRawData(CvArr arr, PointerByReference data, IntBuffer step, CvSize roi_size);
	/**
	 * Returns width and height of array in elements<br>
	 * Original signature : <code>CvSize cvGetSize(const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2362</i>
	 */
	CvSize.ByValue cvGetSize(CvArr arr);
	/**
	 * Copies source array to destination array<br>
	 * Original signature : <code>void cvCopy(const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2367</i>
	 */
	void cvCopy(CvArr src, CvArr dst, CvArr mask);
	/**
	 * Sets all or "masked" elements of input array<br>
	 * to the same value<br>
	 * Original signature : <code>void cvSet(CvArr*, CvScalar, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2373</i>
	 */
	void cvSet(CvArr arr, CvScalar.ByValue value, CvArr mask);
	/**
	 * Clears all the array elements (sets them to 0)<br>
	 * Original signature : <code>void cvSetZero(CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2378</i>
	 */
	void cvSetZero(CvArr arr);
	/**
	 * Splits a multi-channel array into the set of single-channel arrays or<br>
	 * extracts particular [color] plane<br>
	 * Original signature : <code>void cvSplit(const CvArr*, CvArr*, CvArr*, CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2384</i>
	 */
	void cvSplit(CvArr src, CvArr dst0, CvArr dst1, CvArr dst2, CvArr dst3);
	/**
	 * Merges a set of single-channel arrays into the single multi-channel array<br>
	 * or inserts one particular [color] plane to the array<br>
	 * Original signature : <code>void cvMerge(const CvArr*, const CvArr*, const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2390</i>
	 */
	void cvMerge(CvArr src0, CvArr src1, CvArr src2, CvArr src3, CvArr dst);
	/**
	 * Copies several channels from input arrays to<br>
	 * certain channels of output arrays<br>
	 * Original signature : <code>void cvMixChannels(const CvArr**, int, CvArr**, int, const int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2396</i><br>
	 * @deprecated use the safer methods {@link #cvMixChannels(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference, int, int[], int)} and {@link #cvMixChannels(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated
	void cvMixChannels(PointerByReference src, int src_count, PointerByReference dst, int dst_count, IntByReference from_to, int pair_count);
	/**
	 * Copies several channels from input arrays to<br>
	 * certain channels of output arrays<br>
	 * Original signature : <code>void cvMixChannels(const CvArr**, int, CvArr**, int, const int*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2396</i>
	 */
	void cvMixChannels(PointerByReference src, int src_count, PointerByReference dst, int dst_count, int from_to[], int pair_count);
	/**
	 * Performs linear transformation on every source array element:<br>
	 * dst(x,y,c) = scale*src(x,y,c)+shift.<br>
	 * Arbitrary combination of input and output array depths are allowed<br>
	 * (number of channels must be the same), thus the function can be used<br>
	 * for type conversion<br>
	 * Original signature : <code>void cvConvertScale(const CvArr*, CvArr*, double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2405</i>
	 */
	void cvConvertScale(CvArr src, CvArr dst, double scale, double shift);
	/**
	 * Performs linear transformation on every source array element,<br>
	 * stores absolute value of the result:<br>
	 * dst(x,y,c) = abs(scale*src(x,y,c)+shift).<br>
	 * destination array must have 8u type.<br>
	 * In other cases one may use cvConvertScale + cvAbsDiffS<br>
	 * Original signature : <code>void cvConvertScaleAbs(const CvArr*, CvArr*, double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2414</i>
	 */
	void cvConvertScaleAbs(CvArr src, CvArr dst, double scale, double shift);
	/**
	 * checks termination criteria validity and<br>
	 * sets eps to default_eps (if it is not set),<br>
	 * max_iter to default_max_iters (if it is not set)<br>
	 * Original signature : <code>CvTermCriteria cvCheckTermCriteria(CvTermCriteria, double, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2421</i>
	 */
	sj.opencv.jna.cxcore.CvTermCriteria.ByValue cvCheckTermCriteria(sj.opencv.jna.cxcore.CvTermCriteria.ByValue criteria, double default_eps, int default_max_iters);
	/**
	 * dst(mask) = src1(mask) + src2(mask)<br>
	 * Original signature : <code>void cvAdd(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2426</i>
	 */
	void cvAdd(CvArr src1, CvArr src2, CvArr dst, CvArr mask);
	/**
	 * dst(mask) = src(mask) + value<br>
	 * Original signature : <code>void cvAddS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2431</i>
	 */
	void cvAddS(CvArr src, CvScalar.ByValue value, CvArr dst, CvArr mask);
	/**
	 * dst(mask) = src1(mask) - src2(mask)<br>
	 * Original signature : <code>void cvSub(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2436</i>
	 */
	void cvSub(CvArr src1, CvArr src2, CvArr dst, CvArr mask);
	/**
	 * dst(mask) = src(mask) - value = src(mask) + (-value)<br>
	 * Original signature : <code>void cvSubS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2443</i>
	 */
	void cvSubS(CvArr src, CvScalar.ByValue value, CvArr dst, CvArr mask);
	/**
	 * dst(mask) = value - src(mask)<br>
	 * Original signature : <code>void cvSubRS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2448</i>
	 */
	void cvSubRS(CvArr src, CvScalar.ByValue value, CvArr dst, CvArr mask);
	/**
	 * dst(idx) = src1(idx) * src2(idx) * scale<br>
	 * (scaled element-wise multiplication of 2 arrays)<br>
	 * Original signature : <code>void cvMul(const CvArr*, const CvArr*, CvArr*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2454</i>
	 */
	void cvMul(CvArr src1, CvArr src2, CvArr dst, double scale);
	/**
	 * element-wise division/inversion with scaling:<br>
	 * dst(idx) = src1(idx) * scale / src2(idx)<br>
	 * or dst(idx) = scale / src2(idx) if src1 == 0<br>
	 * Original signature : <code>void cvDiv(const CvArr*, const CvArr*, CvArr*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2461</i>
	 */
	void cvDiv(CvArr src1, CvArr src2, CvArr dst, double scale);
	/**
	 * dst = src1 * scale + src2<br>
	 * Original signature : <code>void cvScaleAdd(const CvArr*, CvScalar, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2466</i>
	 */
	void cvScaleAdd(CvArr src1, CvScalar.ByValue scale, CvArr src2, CvArr dst);
	/**
	 * dst = src1 * alpha + src2 * beta + gamma<br>
	 * Original signature : <code>void cvAddWeighted(const CvArr*, double, const CvArr*, double, double, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2471</i>
	 */
	void cvAddWeighted(CvArr src1, double alpha, CvArr src2, double beta, double gamma, CvArr dst);
	/**
	 * result = sum_i(src1(i) * src2(i)) (results for all channels are accumulated together)<br>
	 * Original signature : <code>double cvDotProduct(const CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2476</i>
	 */
	double cvDotProduct(CvArr src1, CvArr src2);
	/**
	 * dst(idx) = src1(idx) & src2(idx)<br>
	 * Original signature : <code>void cvAnd(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2481</i>
	 */
	void cvAnd(CvArr src1, CvArr src2, CvArr dst, CvArr mask);
	/**
	 * dst(idx) = src(idx) & value<br>
	 * Original signature : <code>void cvAndS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2486</i>
	 */
	void cvAndS(CvArr src, CvScalar.ByValue value, CvArr dst, CvArr mask);
	/**
	 * dst(idx) = src1(idx) | src2(idx)<br>
	 * Original signature : <code>void cvOr(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2491</i>
	 */
	void cvOr(CvArr src1, CvArr src2, CvArr dst, CvArr mask);
	/**
	 * dst(idx) = src(idx) | value<br>
	 * Original signature : <code>void cvOrS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2496</i>
	 */
	void cvOrS(CvArr src, CvScalar.ByValue value, CvArr dst, CvArr mask);
	/**
	 * dst(idx) = src1(idx) ^ src2(idx)<br>
	 * Original signature : <code>void cvXor(const CvArr*, const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2501</i>
	 */
	void cvXor(CvArr src1, CvArr src2, CvArr dst, CvArr mask);
	/**
	 * dst(idx) = src(idx) ^ value<br>
	 * Original signature : <code>void cvXorS(const CvArr*, CvScalar, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2506</i>
	 */
	void cvXorS(CvArr src, CvScalar.ByValue value, CvArr dst, CvArr mask);
	/**
	 * dst(idx) = ~src(idx)<br>
	 * Original signature : <code>void cvNot(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2511</i>
	 */
	void cvNot(CvArr src, CvArr dst);
	/**
	 * dst(idx) = lower(idx) <= src(idx) < upper(idx)<br>
	 * Original signature : <code>void cvInRange(const CvArr*, const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2516</i>
	 */
	void cvInRange(CvArr src, CvArr lower, CvArr upper, CvArr dst);
	/**
	 * dst(idx) = lower <= src(idx) < upper<br>
	 * Original signature : <code>void cvInRangeS(const CvArr*, CvScalar, CvScalar, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2521</i>
	 */
	void cvInRangeS(CvArr src, CvScalar.ByValue lower, CvScalar.ByValue upper, CvArr dst);
	/**
	 * dst(idx) = src1(idx) _cmp_op_ src2(idx)<br>
	 * Original signature : <code>void cvCmp(const CvArr*, const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2526</i>
	 */
	void cvCmp(CvArr src1, CvArr src2, CvArr dst, int cmp_op);
	/**
	 * dst(idx) = src1(idx) _cmp_op_ value<br>
	 * Original signature : <code>void cvCmpS(const CvArr*, double, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2531</i>
	 */
	void cvCmpS(CvArr src, double value, CvArr dst, int cmp_op);
	/**
	 * dst(idx) = min(src1(idx),src2(idx))<br>
	 * Original signature : <code>void cvMin(const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2536</i>
	 */
	void cvMin(CvArr src1, CvArr src2, CvArr dst);
	/**
	 * dst(idx) = max(src1(idx),src2(idx))<br>
	 * Original signature : <code>void cvMax(const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2541</i>
	 */
	void cvMax(CvArr src1, CvArr src2, CvArr dst);
	/**
	 * dst(idx) = min(src(idx),value)<br>
	 * Original signature : <code>void cvMinS(const CvArr*, double, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2546</i>
	 */
	void cvMinS(CvArr src, double value, CvArr dst);
	/**
	 * dst(idx) = max(src(idx),value)<br>
	 * Original signature : <code>void cvMaxS(const CvArr*, double, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2551</i>
	 */
	void cvMaxS(CvArr src, double value, CvArr dst);
	/**
	 * dst(x,y,c) = abs(src1(x,y,c) - src2(x,y,c))<br>
	 * Original signature : <code>void cvAbsDiff(const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2556</i>
	 */
	void cvAbsDiff(CvArr src1, CvArr src2, CvArr dst);
	/**
	 * dst(x,y,c) = abs(src(x,y,c) - value(c))<br>
	 * Original signature : <code>void cvAbsDiffS(const CvArr*, CvArr*, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2561</i>
	 */
	void cvAbsDiffS(CvArr src, CvArr dst, CvScalar.ByValue value);
	/**
	 * Does cartesian->polar coordinates conversion.<br>
	 * Either of output components (magnitude or angle) is optional<br>
	 * Original signature : <code>void cvCartToPolar(const CvArr*, const CvArr*, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2567</i>
	 */
	void cvCartToPolar(CvArr x, CvArr y, CvArr magnitude, CvArr angle, int angle_in_degrees);
	/**
	 * Does polar->cartesian coordinates conversion.<br>
	 * Either of output components (magnitude or angle) is optional.<br>
	 * If magnitude is missing it is assumed to be all 1's<br>
	 * Original signature : <code>void cvPolarToCart(const CvArr*, const CvArr*, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2574</i>
	 */
	void cvPolarToCart(CvArr magnitude, CvArr angle, CvArr x, CvArr y, int angle_in_degrees);
	/**
	 * Does powering: dst(idx) = src(idx)^power<br>
	 * Original signature : <code>void cvPow(const CvArr*, CvArr*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2579</i>
	 */
	void cvPow(CvArr src, CvArr dst, double power);
	/**
	 * Does exponention: dst(idx) = exp(src(idx)).<br>
	 * Overflow is not handled yet. Underflow is handled.<br>
	 * Maximal relative error is ~7e-6 for single-precision input<br>
	 * Original signature : <code>void cvExp(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2586</i>
	 */
	void cvExp(CvArr src, CvArr dst);
	/**
	 * Calculates natural logarithms: dst(idx) = log(abs(src(idx))).<br>
	 * Logarithm of 0 gives large negative number(~-700)<br>
	 * Maximal relative error is ~3e-7 for single-precision output<br>
	 * Original signature : <code>void cvLog(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2593</i>
	 */
	void cvLog(CvArr src, CvArr dst);
	/**
	 * Fast arctangent calculation<br>
	 * Original signature : <code>float cvFastArctan(float, float)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2598</i>
	 */
	float cvFastArctan(float y, float x);
	/**
	 * Fast cubic root calculation<br>
	 * Original signature : <code>float cvCbrt(float)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2603</i>
	 */
	float cvCbrt(float value);
	/**
	 * Original signature : <code>int cvCheckArr(const CvArr*, int, double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2605</i>
	 */
	int cvCheckArr(CvArr arr, int flags, double min_val, double max_val);
	/**
	 * Original signature : <code>void cvRandArr(CvRNG*, CvArr*, int, CvScalar, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2607</i><br>
	 * @deprecated use the safer methods {@link #cvRandArr(java.nio.LongBuffer, sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, sj.opencv.jna.cxcore.CvScalar.ByValue, sj.opencv.jna.cxcore.CvScalar.ByValue)} and {@link #cvRandArr(com.sun.jna.ptr.LongByReference, sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, sj.opencv.jna.cxcore.CvScalar.ByValue, sj.opencv.jna.cxcore.CvScalar.ByValue)} instead
	 */
	@Deprecated
	void cvRandArr(LongByReference rng, CvArr arr, int dist_type, CvScalar.ByValue param1, CvScalar.ByValue param2);
	/**
	 * Original signature : <code>void cvRandArr(CvRNG*, CvArr*, int, CvScalar, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2607</i>
	 */
	void cvRandArr(LongBuffer rng, CvArr arr, int dist_type, CvScalar.ByValue param1, CvScalar.ByValue param2);
	/**
	 * Original signature : <code>void cvRandShuffle(CvArr*, CvRNG*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2609</i><br>
	 * @deprecated use the safer methods {@link #cvRandShuffle(sj.opencv.jna.highgui.HighguiLibrary.CvArr, java.nio.LongBuffer, double)} and {@link #cvRandShuffle(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.LongByReference, double)} instead
	 */
	@Deprecated
	void cvRandShuffle(CvArr mat, LongByReference rng, double iter_factor);
	/**
	 * Original signature : <code>void cvRandShuffle(CvArr*, CvRNG*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2609</i>
	 */
	void cvRandShuffle(CvArr mat, LongBuffer rng, double iter_factor);
	/**
	 * Original signature : <code>void cvSort(const CvArr*, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2611</i>
	 */
	void cvSort(CvArr src, CvArr dst, CvArr idxmat, int flags);
	/**
	 * Finds real roots of a cubic equation<br>
	 * Original signature : <code>int cvSolveCubic(const CvMat*, CvMat*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2616</i>
	 */
	int cvSolveCubic(CvMat coeffs, CvMat roots);
	/**
	 * Finds all real and complex roots of a polynomial equation<br>
	 * Original signature : <code>void cvSolvePoly(const CvMat*, CvMat*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2621</i>
	 */
	void cvSolvePoly(CvMat coeffs, CvMat roots2, int maxiter, int fig);
	/**
	 * Calculates cross product of two 3d vectors<br>
	 * Original signature : <code>void cvCrossProduct(const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2626</i>
	 */
	void cvCrossProduct(CvArr src1, CvArr src2, CvArr dst);
	/**
	 * Extended matrix transform:<br>
	 * dst = alpha*op(A)*op(B) + beta*op(C), where op(X) is X or X^T<br>
	 * Original signature : <code>void cvGEMM(const CvArr*, const CvArr*, double, const CvArr*, double, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2632</i>
	 */
	void cvGEMM(CvArr src1, CvArr src2, double alpha, CvArr src3, double beta, CvArr dst, int tABC);
	/**
	 * Transforms each element of source array and stores<br>
	 * resultant vectors in destination array<br>
	 * Original signature : <code>void cvTransform(const CvArr*, CvArr*, const CvMat*, const CvMat*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2638</i>
	 */
	void cvTransform(CvArr src, CvArr dst, CvMat transmat, CvMat shiftvec);
	/**
	 * Does perspective transform on every element of input array<br>
	 * Original signature : <code>void cvPerspectiveTransform(const CvArr*, CvArr*, const CvMat*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2643</i>
	 */
	void cvPerspectiveTransform(CvArr src, CvArr dst, CvMat mat);
	/**
	 * Calculates (A-delta)*(A-delta)^T (order=0) or (A-delta)^T*(A-delta) (order=1)<br>
	 * Original signature : <code>void cvMulTransposed(const CvArr*, CvArr*, int, const CvArr*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2648</i>
	 */
	void cvMulTransposed(CvArr src, CvArr dst, int order, CvArr delta, double scale);
	/**
	 * Tranposes matrix. Square matrices can be transposed in-place<br>
	 * Original signature : <code>void cvTranspose(const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2653</i>
	 */
	void cvTranspose(CvArr src, CvArr dst);
	/**
	 * Completes the symmetric matrix from the lower (LtoR=0) or from the upper (LtoR!=0) part<br>
	 * Original signature : <code>void cvCompleteSymm(CvMat*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2658</i>
	 */
	void cvCompleteSymm(CvMat matrix, int LtoR);
	/**
	 * Mirror array data around horizontal (flip=0),<br>
	 * vertical (flip=1) or both(flip=-1) axises:<br>
	 * cvFlip(src) flips images vertically and sequences horizontally (inplace)<br>
	 * Original signature : <code>void cvFlip(const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2665</i>
	 */
	void cvFlip(CvArr src, CvArr dst, int flip_mode);
	/**
	 * Performs Singular Value Decomposition of a matrix<br>
	 * Original signature : <code>void cvSVD(CvArr*, CvArr*, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2670</i>
	 */
	void cvSVD(CvArr A, CvArr W, CvArr U, CvArr V, int flags);
	/**
	 * Performs Singular Value Back Substitution (solves A*X = B):<br>
	 * flags must be the same as in cvSVD<br>
	 * Original signature : <code>void cvSVBkSb(const CvArr*, const CvArr*, const CvArr*, const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2676</i>
	 */
	void cvSVBkSb(CvArr W, CvArr U, CvArr V, CvArr B, CvArr X, int flags);
	/**
	 * Inverts matrix<br>
	 * Original signature : <code>double cvInvert(const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2681</i>
	 */
	double cvInvert(CvArr src, CvArr dst, int method);
	/**
	 * Solves linear system (src1)*(dst) = (src2)<br>
	 * (returns 0 if src1 is a singular and CV_LU method is used)<br>
	 * Original signature : <code>int cvSolve(const CvArr*, const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2687</i>
	 */
	int cvSolve(CvArr src1, CvArr src2, CvArr dst, int method);
	/**
	 * Calculates determinant of input matrix<br>
	 * Original signature : <code>double cvDet(const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2692</i>
	 */
	double cvDet(CvArr mat);
	/**
	 * Calculates trace of the matrix (sum of elements on the main diagonal)<br>
	 * Original signature : <code>CvScalar cvTrace(const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2697</i>
	 */
	CvScalar.ByValue cvTrace(CvArr mat);
	/**
	 * Finds eigen values and vectors of a symmetric matrix<br>
	 * Original signature : <code>void cvEigenVV(CvArr*, CvArr*, CvArr*, double, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2702</i>
	 */
	void cvEigenVV(CvArr mat, CvArr evects, CvArr evals, double eps, int lowindex, int highindex);
	/**
	 * Makes an identity matrix (mat_ij = i == j)<br>
	 * Original signature : <code>void cvSetIdentity(CvArr*, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2707</i>
	 */
	void cvSetIdentity(CvArr mat, CvScalar.ByValue value);
	/**
	 * Fills matrix with given range of numbers<br>
	 * Original signature : <code>CvArr* cvRange(CvArr*, double, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2712</i>
	 */
	Pointer cvRange(CvArr mat, double start, double end);
	/**
	 * Original signature : <code>void cvCalcCovarMatrix(const CvArr**, int, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2714</i>
	 */
	void cvCalcCovarMatrix(PointerByReference vects, int count, CvArr cov_mat, CvArr avg, int flags);
	/**
	 * Original signature : <code>void cvCalcPCA(const CvArr*, CvArr*, CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2716</i>
	 */
	void cvCalcPCA(CvArr data, CvArr mean, CvArr eigenvals, CvArr eigenvects, int flags);
	/**
	 * Original signature : <code>void cvProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2718</i>
	 */
	void cvProjectPCA(CvArr data, CvArr mean, CvArr eigenvects, CvArr result);
	/**
	 * Original signature : <code>void cvBackProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2720</i>
	 */
	void cvBackProjectPCA(CvArr proj, CvArr mean, CvArr eigenvects, CvArr result);
	/**
	 * Calculates Mahalanobis(weighted) distance<br>
	 * Original signature : <code>double cvMahalanobis(const CvArr*, const CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2725</i>
	 */
	double cvMahalanobis(CvArr vec1, CvArr vec2, CvArr mat);
	/**
	 * Finds sum of array elements<br>
	 * Original signature : <code>CvScalar cvSum(const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2730</i>
	 */
	CvScalar.ByValue cvSum(CvArr arr);
	/**
	 * Calculates number of non-zero pixels<br>
	 * Original signature : <code>int cvCountNonZero(const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2735</i>
	 */
	int cvCountNonZero(CvArr arr);
	/**
	 * Calculates mean value of array elements<br>
	 * Original signature : <code>CvScalar cvAvg(const CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2740</i>
	 */
	CvScalar.ByValue cvAvg(CvArr arr, CvArr mask);
	/**
	 * Calculates mean and standard deviation of pixel values<br>
	 * Original signature : <code>void cvAvgSdv(const CvArr*, CvScalar*, CvScalar*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2745</i>
	 */
	void cvAvgSdv(CvArr arr, CvScalar mean, CvScalar std_dev, CvArr mask);
	/**
	 * Finds global minimum, maximum and their positions<br>
	 * Original signature : <code>void cvMinMaxLoc(const CvArr*, double*, double*, CvPoint*, CvPoint*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2750</i><br>
	 * @deprecated use the safer methods {@link #cvMinMaxLoc(sj.opencv.jna.highgui.HighguiLibrary.CvArr, java.nio.DoubleBuffer, java.nio.DoubleBuffer, sj.opencv.jna.cxcore.CvPoint, sj.opencv.jna.cxcore.CvPoint, sj.opencv.jna.highgui.HighguiLibrary.CvArr)} and {@link #cvMinMaxLoc(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, sj.opencv.jna.cxcore.CvPoint, sj.opencv.jna.cxcore.CvPoint, sj.opencv.jna.highgui.HighguiLibrary.CvArr)} instead
	 */
	@Deprecated
	void cvMinMaxLoc(CvArr arr, DoubleByReference min_val, DoubleByReference max_val, CvPoint min_loc, CvPoint max_loc, CvArr mask);
	/**
	 * Finds global minimum, maximum and their positions<br>
	 * Original signature : <code>void cvMinMaxLoc(const CvArr*, double*, double*, CvPoint*, CvPoint*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2750</i>
	 */
	void cvMinMaxLoc(CvArr arr, DoubleBuffer min_val, DoubleBuffer max_val, CvPoint min_loc, CvPoint max_loc, CvArr mask);
	/**
	 * Finds norm, difference norm or relative difference norm for an array (or two arrays)<br>
	 * Original signature : <code>double cvNorm(const CvArr*, const CvArr*, int, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2755</i>
	 */
	double cvNorm(CvArr arr1, CvArr arr2, int norm_type, CvArr mask);
	/**
	 * Original signature : <code>void cvNormalize(const CvArr*, CvArr*, double, double, int, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2757</i>
	 */
	void cvNormalize(CvArr src, CvArr dst, double a, double b, int norm_type, CvArr mask);
	/**
	 * Original signature : <code>void cvReduce(const CvArr*, CvArr*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2759</i>
	 */
	void cvReduce(CvArr src, CvArr dst, int dim, int op);
	/**
	 * Discrete Fourier Transform:<br>
	 * complex->complex,<br>
	 * real->ccs (forward),<br>
	 * ccs->real (inverse)<br>
	 * Original signature : <code>void cvDFT(const CvArr*, CvArr*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2767</i>
	 */
	void cvDFT(CvArr src, CvArr dst, int flags, int nonzero_rows);
	/**
	 * Multiply results of DFTs: DFT(X)*DFT(Y) or DFT(X)*conj(DFT(Y))<br>
	 * Original signature : <code>void cvMulSpectrums(const CvArr*, const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2772</i>
	 */
	void cvMulSpectrums(CvArr src1, CvArr src2, CvArr dst, int flags);
	/**
	 * Finds optimal DFT vector size >= size0<br>
	 * Original signature : <code>int cvGetOptimalDFTSize(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2777</i>
	 */
	int cvGetOptimalDFTSize(int size0);
	/**
	 * Discrete Cosine Transform<br>
	 * Original signature : <code>void cvDCT(const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2782</i>
	 */
	void cvDCT(CvArr src, CvArr dst, int flags);
	/**
	 * Calculates length of sequence slice (with support of negative indices).<br>
	 * Original signature : <code>int cvSliceLength(CvSlice, const CvSeq*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2787</i>
	 */
	int cvSliceLength(sj.opencv.jna.cxcore.CvSlice.ByValue slice, CvSeq seq);
	/**
	 * Creates new memory storage.<br>
	 * block_size == 0 means that default,<br>
	 * somewhat optimal size, is used (currently, it is 64K)<br>
	 * Original signature : <code>CvMemStorage* cvCreateMemStorage(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2794</i>
	 */
	CvMemStorage cvCreateMemStorage(int block_size);
	/**
	 * Creates a memory storage that will borrow memory blocks from parent storage<br>
	 * Original signature : <code>CvMemStorage* cvCreateChildMemStorage(CvMemStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2799</i>
	 */
	CvMemStorage cvCreateChildMemStorage(CvMemStorage parent);
	/**
	 * Releases memory storage. All the children of a parent must be released before<br>
	 * the parent. A child storage returns all the blocks to parent when it is released<br>
	 * Original signature : <code>void cvReleaseMemStorage(CvMemStorage**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2805</i><br>
	 * @deprecated use the safer method {@link #cvReleaseMemStorage(sj.opencv.jna.cxcore.CvMemStorage.ByReference[])} instead
	 */
	@Deprecated
	void cvReleaseMemStorage(PointerByReference storage);
	/**
	 * Releases memory storage. All the children of a parent must be released before<br>
	 * the parent. A child storage returns all the blocks to parent when it is released<br>
	 * Original signature : <code>void cvReleaseMemStorage(CvMemStorage**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2805</i>
	 */
	void cvReleaseMemStorage(CvMemStorage.ByReference storage[]);
	/**
	 * Clears memory storage. This is the only way(!!!) (besides cvRestoreMemStoragePos)<br>
	 * to reuse memory allocated for the storage - cvClearSeq,cvClearSet ...<br>
	 * do not free any memory.<br>
	 * A child storage returns all the blocks to the parent when it is cleared<br>
	 * Original signature : <code>void cvClearMemStorage(CvMemStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2813</i>
	 */
	void cvClearMemStorage(CvMemStorage storage);
	/**
	 * Remember a storage "free memory" position<br>
	 * Original signature : <code>void cvSaveMemStoragePos(const CvMemStorage*, CvMemStoragePos*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2818</i>
	 */
	void cvSaveMemStoragePos(CvMemStorage storage, CvMemStoragePos pos);
	/**
	 * Restore a storage "free memory" position<br>
	 * Original signature : <code>void cvRestoreMemStoragePos(CvMemStorage*, CvMemStoragePos*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2823</i>
	 */
	void cvRestoreMemStoragePos(CvMemStorage storage, CvMemStoragePos pos);
	/**
	 * Allocates continuous buffer of the specified size in the storage<br>
	 * Original signature : <code>void* cvMemStorageAlloc(CvMemStorage*, size_t)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2828</i>
	 */
	Pointer cvMemStorageAlloc(CvMemStorage storage, NativeSize size);
	/**
	 * Allocates string in memory storage<br>
	 * Original signature : <code>CvString cvMemStorageAllocString(CvMemStorage*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2833</i><br>
	 * @deprecated use the safer methods {@link #cvMemStorageAllocString(sj.opencv.jna.cxcore.CvMemStorage, java.lang.String, int)} and {@link #cvMemStorageAllocString(sj.opencv.jna.cxcore.CvMemStorage, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	sj.opencv.jna.cxcore.CvString.ByValue cvMemStorageAllocString(CvMemStorage storage, Pointer ptr, int len);
	/**
	 * Allocates string in memory storage<br>
	 * Original signature : <code>CvString cvMemStorageAllocString(CvMemStorage*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2833</i>
	 */
	sj.opencv.jna.cxcore.CvString.ByValue cvMemStorageAllocString(CvMemStorage storage, String ptr, int len);
	/**
	 * Creates new empty sequence that will reside in the specified storage<br>
	 * Original signature : <code>CvSeq* cvCreateSeq(int, size_t, size_t, CvMemStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2838</i>
	 */
	CvSeq cvCreateSeq(int seq_flags, NativeSize header_size, NativeSize elem_size, CvMemStorage storage);
	/**
	 * Changes default size (granularity) of sequence blocks.<br>
	 * The default size is ~1Kbyte<br>
	 * Original signature : <code>void cvSetSeqBlockSize(CvSeq*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2844</i>
	 */
	void cvSetSeqBlockSize(CvSeq seq, int delta_elems);
	/**
	 * Adds new element to the end of sequence. Returns pointer to the element<br>
	 * Original signature : <code>schar* cvSeqPush(CvSeq*, const void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2849</i>
	 */
	Pointer cvSeqPush(CvSeq seq, Pointer element);
	/**
	 * Adds new element to the beginning of sequence. Returns pointer to it<br>
	 * Original signature : <code>schar* cvSeqPushFront(CvSeq*, const void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2854</i>
	 */
	Pointer cvSeqPushFront(CvSeq seq, Pointer element);
	/**
	 * Removes the last element from sequence and optionally saves it<br>
	 * Original signature : <code>void cvSeqPop(CvSeq*, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2859</i>
	 */
	void cvSeqPop(CvSeq seq, Pointer element);
	/**
	 * Removes the first element from sequence and optioanally saves it<br>
	 * Original signature : <code>void cvSeqPopFront(CvSeq*, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2864</i>
	 */
	void cvSeqPopFront(CvSeq seq, Pointer element);
	/**
	 * Adds several new elements to the end of sequence<br>
	 * Original signature : <code>void cvSeqPushMulti(CvSeq*, const void*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2869</i>
	 */
	void cvSeqPushMulti(CvSeq seq, Pointer elements, int count, int in_front);
	/**
	 * Removes several elements from the end of sequence and optionally saves them<br>
	 * Original signature : <code>void cvSeqPopMulti(CvSeq*, void*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2874</i>
	 */
	void cvSeqPopMulti(CvSeq seq, Pointer elements, int count, int in_front);
	/**
	 * Inserts a new element in the middle of sequence.<br>
	 * cvSeqInsert(seq,0,elem) == cvSeqPushFront(seq,elem)<br>
	 * Original signature : <code>schar* cvSeqInsert(CvSeq*, int, const void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2880</i>
	 */
	Pointer cvSeqInsert(CvSeq seq, int before_index, Pointer element);
	/**
	 * Removes specified sequence element<br>
	 * Original signature : <code>void cvSeqRemove(CvSeq*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2885</i>
	 */
	void cvSeqRemove(CvSeq seq, int index);
	/**
	 * Removes all the elements from the sequence. The freed memory<br>
	 * can be reused later only by the same sequence unless cvClearMemStorage<br>
	 * or cvRestoreMemStoragePos is called<br>
	 * Original signature : <code>void cvClearSeq(CvSeq*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2892</i>
	 */
	void cvClearSeq(CvSeq seq);
	/**
	 * Retrieves pointer to specified sequence element.<br>
	 * Negative indices are supported and mean counting from the end<br>
	 * (e.g -1 means the last sequence element)<br>
	 * Original signature : <code>schar* cvGetSeqElem(const CvSeq*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2899</i>
	 */
	Pointer cvGetSeqElem(CvSeq seq, int index);
	/**
	 * Calculates index of the specified sequence element.<br>
	 * Returns -1 if element does not belong to the sequence<br>
	 * Original signature : <code>int cvSeqElemIdx(const CvSeq*, const void*, CvSeqBlock**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2905</i><br>
	 * @deprecated use the safer method {@link #cvSeqElemIdx(sj.opencv.jna.cxcore.CvSeq, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvSeqBlock.ByReference[])} instead
	 */
	@Deprecated
	int cvSeqElemIdx(CvSeq seq, Pointer element, PointerByReference block);
	/**
	 * Calculates index of the specified sequence element.<br>
	 * Returns -1 if element does not belong to the sequence<br>
	 * Original signature : <code>int cvSeqElemIdx(const CvSeq*, const void*, CvSeqBlock**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2905</i>
	 */
	int cvSeqElemIdx(CvSeq seq, Pointer element, CvSeqBlock.ByReference block[]);
	/**
	 * Initializes sequence writer. The new elements will be added to the end of sequence<br>
	 * Original signature : <code>void cvStartAppendToSeq(CvSeq*, CvSeqWriter*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2910</i>
	 */
	void cvStartAppendToSeq(CvSeq seq, CvSeqWriter writer);
	/**
	 * Combination of cvCreateSeq and cvStartAppendToSeq<br>
	 * Original signature : <code>void cvStartWriteSeq(int, int, int, CvMemStorage*, CvSeqWriter*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2915</i>
	 */
	void cvStartWriteSeq(int seq_flags, int header_size, int elem_size, CvMemStorage storage, CvSeqWriter writer);
	/**
	 * Closes sequence writer, updates sequence header and returns pointer<br>
	 * to the resultant sequence<br>
	 * (which may be useful if the sequence was created using cvStartWriteSeq))<br>
	 * Original signature : <code>CvSeq* cvEndWriteSeq(CvSeqWriter*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2922</i>
	 */
	CvSeq cvEndWriteSeq(CvSeqWriter writer);
	/**
	 * Updates sequence header. May be useful to get access to some of previously<br>
	 * written elements via cvGetSeqElem or sequence reader<br>
	 * Original signature : <code>void cvFlushSeqWriter(CvSeqWriter*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2928</i>
	 */
	void cvFlushSeqWriter(CvSeqWriter writer);
	/**
	 * Initializes sequence reader.<br>
	 * The sequence can be read in forward or backward direction<br>
	 * Original signature : <code>void cvStartReadSeq(const CvSeq*, CvSeqReader*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2934</i>
	 */
	void cvStartReadSeq(CvSeq seq, CvSeqReader reader, int reverse);
	/**
	 * Returns current sequence reader position (currently observed sequence element)<br>
	 * Original signature : <code>int cvGetSeqReaderPos(CvSeqReader*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2939</i>
	 */
	int cvGetSeqReaderPos(CvSeqReader reader);
	/**
	 * Changes sequence reader position. It may seek to an absolute or<br>
	 * to relative to the current position<br>
	 * Original signature : <code>void cvSetSeqReaderPos(CvSeqReader*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2945</i>
	 */
	void cvSetSeqReaderPos(CvSeqReader reader, int index, int is_relative);
	/**
	 * Copies sequence content to a continuous piece of memory<br>
	 * Original signature : <code>void* cvCvtSeqToArray(const CvSeq*, void*, CvSlice)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2950</i>
	 */
	Pointer cvCvtSeqToArray(CvSeq seq, Pointer elements, sj.opencv.jna.cxcore.CvSlice.ByValue slice);
	/**
	 * Creates sequence header for array.<br>
	 * After that all the operations on sequences that do not alter the content<br>
	 * can be applied to the resultant sequence<br>
	 * Original signature : <code>CvSeq* cvMakeSeqHeaderForArray(int, int, int, void*, int, CvSeq*, CvSeqBlock*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2957</i>
	 */
	CvSeq cvMakeSeqHeaderForArray(int seq_type, int header_size, int elem_size, Pointer elements, int total, CvSeq seq, CvSeqBlock block);
	/**
	 * Extracts sequence slice (with or without copying sequence elements)<br>
	 * Original signature : <code>CvSeq* cvSeqSlice(const CvSeq*, CvSlice, CvMemStorage*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2962</i>
	 */
	CvSeq cvSeqSlice(CvSeq seq, sj.opencv.jna.cxcore.CvSlice.ByValue slice, CvMemStorage storage, int copy_data);
	/**
	 * Original signature : <code>CvSeq* cvCloneSeq(const CvSeq*, CvMemStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2966</i>
	 */
	CvSeq cvCloneSeq(CvSeq seq, CvMemStorage storage);
	/**
	 * Removes sequence slice<br>
	 * Original signature : <code>void cvSeqRemoveSlice(CvSeq*, CvSlice)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2971</i>
	 */
	void cvSeqRemoveSlice(CvSeq seq, sj.opencv.jna.cxcore.CvSlice.ByValue slice);
	/**
	 * Inserts a sequence or array into another sequence<br>
	 * Original signature : <code>void cvSeqInsertSlice(CvSeq*, int, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2976</i>
	 */
	void cvSeqInsertSlice(CvSeq seq, int before_index, CvArr from_arr);
	/**
	 * Sorts sequence in-place given element comparison function<br>
	 * Original signature : <code>void cvSeqSort(CvSeq*, CvCmpFunc, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2983</i>
	 */
	void cvSeqSort(CvSeq seq, CxcoreLibrary.CvCmpFunc func, Pointer userdata);
	/**
	 * Finds element in a [sorted] sequence<br>
	 * Original signature : <code>schar* cvSeqSearch(CvSeq*, const void*, CvCmpFunc, int, int*, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2988</i><br>
	 * @deprecated use the safer methods {@link #cvSeqSearch(sj.opencv.jna.cxcore.CvSeq, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CxcoreLibrary.CvCmpFunc, int, java.nio.IntBuffer, com.sun.jna.Pointer)} and {@link #cvSeqSearch(sj.opencv.jna.cxcore.CvSeq, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CxcoreLibrary.CvCmpFunc, int, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	Pointer cvSeqSearch(CvSeq seq, Pointer elem, CxcoreLibrary.CvCmpFunc func, int is_sorted, IntByReference elem_idx, Pointer userdata);
	/**
	 * Finds element in a [sorted] sequence<br>
	 * Original signature : <code>schar* cvSeqSearch(CvSeq*, const void*, CvCmpFunc, int, int*, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2988</i>
	 */
	Pointer cvSeqSearch(CvSeq seq, Pointer elem, CxcoreLibrary.CvCmpFunc func, int is_sorted, IntBuffer elem_idx, Pointer userdata);
	/**
	 * Reverses order of sequence elements in-place<br>
	 * Original signature : <code>void cvSeqInvert(CvSeq*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2993</i>
	 */
	void cvSeqInvert(CvSeq seq);
	/**
	 * Splits sequence into one or more equivalence classes using the specified criteria<br>
	 * Original signature : <code>int cvSeqPartition(const CvSeq*, CvMemStorage*, CvSeq**, CvCmpFunc, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2998</i><br>
	 * @deprecated use the safer method {@link #cvSeqPartition(sj.opencv.jna.cxcore.CvSeq, sj.opencv.jna.cxcore.CvMemStorage, sj.opencv.jna.cxcore.CvSeq.ByReference[], sj.opencv.jna.cxcore.CxcoreLibrary.CvCmpFunc, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	int cvSeqPartition(CvSeq seq, CvMemStorage storage, PointerByReference labels, CxcoreLibrary.CvCmpFunc is_equal, Pointer userdata);
	/**
	 * Splits sequence into one or more equivalence classes using the specified criteria<br>
	 * Original signature : <code>int cvSeqPartition(const CvSeq*, CvMemStorage*, CvSeq**, CvCmpFunc, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:2998</i>
	 */
	int cvSeqPartition(CvSeq seq, CvMemStorage storage, CvSeq.ByReference labels[], CxcoreLibrary.CvCmpFunc is_equal, Pointer userdata);
	/**
	 * Internal sequence functions ***********<br>
	 * Original signature : <code>void cvChangeSeqBlock(void*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3003</i>
	 */
	void cvChangeSeqBlock(Pointer reader, int direction);
	/**
	 * Original signature : <code>void cvCreateSeqBlock(CvSeqWriter*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3005</i>
	 */
	void cvCreateSeqBlock(CvSeqWriter writer);
	/**
	 * Creates a new set<br>
	 * Original signature : <code>CvSet* cvCreateSet(int, int, int, CvMemStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3010</i>
	 */
	CvSet cvCreateSet(int set_flags, int header_size, int elem_size, CvMemStorage storage);
	/**
	 * Adds new element to the set and returns pointer to it<br>
	 * Original signature : <code>int cvSetAdd(CvSet*, CvSetElem*, CvSetElem**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3015</i><br>
	 * @deprecated use the safer method {@link #cvSetAdd(sj.opencv.jna.cxcore.CvSet, sj.opencv.jna.cxcore.CvSetElem, sj.opencv.jna.cxcore.CvSetElem.ByReference[])} instead
	 */
	@Deprecated
	int cvSetAdd(CvSet set_header, CvSetElem elem, PointerByReference inserted_elem);
	/**
	 * Adds new element to the set and returns pointer to it<br>
	 * Original signature : <code>int cvSetAdd(CvSet*, CvSetElem*, CvSetElem**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3015</i>
	 */
	int cvSetAdd(CvSet set_header, CvSetElem elem, CvSetElem.ByReference inserted_elem[]);
	/**
	 * Fast variant of cvSetAdd<br>
	 * Original signature : <code>CvSetElem* cvSetNew(CvSet*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3029</i>
	 */
	CvSetElem cvSetNew(CvSet set_header);
	/**
	 * Removes set element given its pointer<br>
	 * Original signature : <code>void cvSetRemoveByPtr(CvSet*, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3041</i>
	 */
	void cvSetRemoveByPtr(CvSet set_header, Pointer elem);
	/**
	 * Removes element from the set by its index<br>
	 * Original signature : <code>void cvSetRemove(CvSet*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3046</i>
	 */
	void cvSetRemove(CvSet set_header, int index);
	/**
	 * Returns a set element by index. If the element doesn't belong to the set,<br>
	 * NULL is returned<br>
	 * Original signature : <code>CvSetElem* cvGetSetElem(const CvSet*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3055</i>
	 */
	CvSetElem cvGetSetElem(CvSet set_header, int index);
	/**
	 * Removes all the elements from the set<br>
	 * Original signature : <code>void cvClearSet(CvSet*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3060</i>
	 */
	void cvClearSet(CvSet set_header);
	/**
	 * Creates new graph<br>
	 * Original signature : <code>CvGraph* cvCreateGraph(int, int, int, int, CvMemStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3065</i>
	 */
	CvGraph cvCreateGraph(int graph_flags, int header_size, int vtx_size, int edge_size, CvMemStorage storage);
	/**
	 * Adds new vertex to the graph<br>
	 * Original signature : <code>int cvGraphAddVtx(CvGraph*, const CvGraphVtx*, CvGraphVtx**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3070</i><br>
	 * @deprecated use the safer method {@link #cvGraphAddVtx(sj.opencv.jna.cxcore.CvGraph, sj.opencv.jna.cxcore.CvGraphVtx, sj.opencv.jna.cxcore.CvGraphVtx.ByReference[])} instead
	 */
	@Deprecated
	int cvGraphAddVtx(CvGraph graph, CvGraphVtx vtx, PointerByReference inserted_vtx);
	/**
	 * Adds new vertex to the graph<br>
	 * Original signature : <code>int cvGraphAddVtx(CvGraph*, const CvGraphVtx*, CvGraphVtx**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3070</i>
	 */
	int cvGraphAddVtx(CvGraph graph, CvGraphVtx vtx, CvGraphVtx.ByReference inserted_vtx[]);
	/**
	 * Removes vertex from the graph together with all incident edges<br>
	 * Original signature : <code>int cvGraphRemoveVtx(CvGraph*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3075</i>
	 */
	int cvGraphRemoveVtx(CvGraph graph, int index);
	/**
	 * Original signature : <code>int cvGraphRemoveVtxByPtr(CvGraph*, CvGraphVtx*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3077</i>
	 */
	int cvGraphRemoveVtxByPtr(CvGraph graph, CvGraphVtx vtx);
	/**
	 * Link two vertices specifed by indices or pointers if they<br>
	 * are not connected or return pointer to already existing edge<br>
	 * connecting the vertices.<br>
	 * Functions return 1 if a new edge was created, 0 otherwise<br>
	 * Original signature : <code>int cvGraphAddEdge(CvGraph*, int, int, const CvGraphEdge*, CvGraphEdge**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3085</i><br>
	 * @deprecated use the safer method {@link #cvGraphAddEdge(sj.opencv.jna.cxcore.CvGraph, int, int, sj.opencv.jna.cxcore.CvGraphEdge, sj.opencv.jna.cxcore.CvGraphEdge.ByReference[])} instead
	 */
	@Deprecated
	int cvGraphAddEdge(CvGraph graph, int start_idx, int end_idx, CvGraphEdge edge, PointerByReference inserted_edge);
	/**
	 * Link two vertices specifed by indices or pointers if they<br>
	 * are not connected or return pointer to already existing edge<br>
	 * connecting the vertices.<br>
	 * Functions return 1 if a new edge was created, 0 otherwise<br>
	 * Original signature : <code>int cvGraphAddEdge(CvGraph*, int, int, const CvGraphEdge*, CvGraphEdge**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3085</i>
	 */
	int cvGraphAddEdge(CvGraph graph, int start_idx, int end_idx, CvGraphEdge edge, CvGraphEdge.ByReference inserted_edge[]);
	/**
	 * Original signature : <code>int cvGraphAddEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*, const CvGraphEdge*, CvGraphEdge**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3087</i><br>
	 * @deprecated use the safer method {@link #cvGraphAddEdgeByPtr(sj.opencv.jna.cxcore.CvGraph, sj.opencv.jna.cxcore.CvGraphVtx, sj.opencv.jna.cxcore.CvGraphVtx, sj.opencv.jna.cxcore.CvGraphEdge, sj.opencv.jna.cxcore.CvGraphEdge.ByReference[])} instead
	 */
	@Deprecated
	int cvGraphAddEdgeByPtr(CvGraph graph, CvGraphVtx start_vtx, CvGraphVtx end_vtx, CvGraphEdge edge, PointerByReference inserted_edge);
	/**
	 * Original signature : <code>int cvGraphAddEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*, const CvGraphEdge*, CvGraphEdge**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3087</i>
	 */
	int cvGraphAddEdgeByPtr(CvGraph graph, CvGraphVtx start_vtx, CvGraphVtx end_vtx, CvGraphEdge edge, CvGraphEdge.ByReference inserted_edge[]);
	/**
	 * Remove edge connecting two vertices<br>
	 * Original signature : <code>void cvGraphRemoveEdge(CvGraph*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3092</i>
	 */
	void cvGraphRemoveEdge(CvGraph graph, int start_idx, int end_idx);
	/**
	 * Original signature : <code>void cvGraphRemoveEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3094</i>
	 */
	void cvGraphRemoveEdgeByPtr(CvGraph graph, CvGraphVtx start_vtx, CvGraphVtx end_vtx);
	/**
	 * Find edge connecting two vertices<br>
	 * Original signature : <code>CvGraphEdge* cvFindGraphEdge(const CvGraph*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3099</i>
	 */
	CvGraphEdge cvFindGraphEdge(CvGraph graph, int start_idx, int end_idx);
	/**
	 * Original signature : <code>CvGraphEdge* cvFindGraphEdgeByPtr(const CvGraph*, const CvGraphVtx*, const CvGraphVtx*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3101</i>
	 */
	CvGraphEdge cvFindGraphEdgeByPtr(CvGraph graph, CvGraphVtx start_vtx, CvGraphVtx end_vtx);
	/**
	 * Remove all vertices and edges from the graph<br>
	 * Original signature : <code>void cvClearGraph(CvGraph*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3106</i>
	 */
	void cvClearGraph(CvGraph graph);
	/**
	 * Count number of edges incident to the vertex<br>
	 * Original signature : <code>int cvGraphVtxDegree(const CvGraph*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3111</i>
	 */
	int cvGraphVtxDegree(CvGraph graph, int vtx_idx);
	/**
	 * Original signature : <code>int cvGraphVtxDegreeByPtr(const CvGraph*, const CvGraphVtx*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3113</i>
	 */
	int cvGraphVtxDegreeByPtr(CvGraph graph, CvGraphVtx vtx);
	/**
	 * Creates new graph scanner.<br>
	 * Original signature : <code>CvGraphScanner* cvCreateGraphScanner(CvGraph*, CvGraphVtx*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3127</i>
	 */
	CvGraphScanner cvCreateGraphScanner(CvGraph graph, CvGraphVtx vtx, int mask);
	/**
	 * Releases graph scanner.<br>
	 * Original signature : <code>void cvReleaseGraphScanner(CvGraphScanner**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3132</i><br>
	 * @deprecated use the safer method {@link #cvReleaseGraphScanner(sj.opencv.jna.cxcore.CvGraphScanner.ByReference[])} instead
	 */
	@Deprecated
	void cvReleaseGraphScanner(PointerByReference scanner);
	/**
	 * Releases graph scanner.<br>
	 * Original signature : <code>void cvReleaseGraphScanner(CvGraphScanner**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3132</i>
	 */
	void cvReleaseGraphScanner(CvGraphScanner.ByReference scanner[]);
	/**
	 * Get next graph element<br>
	 * Original signature : <code>int cvNextGraphItem(CvGraphScanner*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3137</i>
	 */
	int cvNextGraphItem(CvGraphScanner scanner);
	/**
	 * Creates a copy of graph<br>
	 * Original signature : <code>CvGraph* cvCloneGraph(const CvGraph*, CvMemStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3142</i>
	 */
	CvGraph cvCloneGraph(CvGraph graph, CvMemStorage storage);
	/**
	 * Draws 4-connected, 8-connected or antialiased line segment connecting two points<br>
	 * Original signature : <code>void cvLine(CvArr*, CvPoint, CvPoint, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3147</i>
	 */
	void cvLine(CvArr img, CvPoint.ByValue pt1, CvPoint.ByValue pt2, CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws a rectangle given two opposite corners of the rectangle (pt1 & pt2),<br>
	 * if thickness<0 (e.g. thickness == CV_FILLED), the filled box is drawn<br>
	 * Original signature : <code>void cvRectangle(CvArr*, CvPoint, CvPoint, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3153</i>
	 */
	void cvRectangle(CvArr img, CvPoint.ByValue pt1, CvPoint.ByValue pt2, CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws a rectangle specified by a CvRect structure<br>
	 * Original signature : <code>void cvRectangleR(CvArr*, CvRect, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3158</i>
	 */
	void cvRectangleR(CvArr img, sj.opencv.jna.cxcore.CvRect.ByValue r, CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws a circle with specified center and radius.<br>
	 * Thickness works in the same way as with cvRectangle<br>
	 * Original signature : <code>void cvCircle(CvArr*, CvPoint, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3164</i>
	 */
	void cvCircle(CvArr img, CvPoint.ByValue center, int radius, CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws ellipse outline, filled ellipse, elliptic arc or filled elliptic sector,<br>
	 * depending on <thickness>, <start_angle> and <end_angle> parameters. The resultant figure<br>
	 * is rotated by <angle>. All the angles are in degrees<br>
	 * Original signature : <code>void cvEllipse(CvArr*, CvPoint, CvSize, double, double, double, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3171</i>
	 */
	void cvEllipse(CvArr img, CvPoint.ByValue center, CvSize.ByValue axes, double angle, double start_angle, double end_angle, CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Original signature : <code>void cvEllipseBox(CvArr*, CvBox2D, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3178</i>
	 */
	void cvEllipseBox(CvArr img, sj.opencv.jna.cxcore.CvBox2D.ByValue box, CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Fills convex or monotonous polygon.<br>
	 * Original signature : <code>void cvFillConvexPoly(CvArr*, const CvPoint*, int, CvScalar, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3183</i>
	 */
	void cvFillConvexPoly(CvArr img, CvPoint pts, int npts, CvScalar.ByValue color, int line_type, int shift);
	/**
	 * Fills an area bounded by one or more arbitrary polygons<br>
	 * Original signature : <code>void cvFillPoly(CvArr*, CvPoint**, const int*, int, CvScalar, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3188</i><br>
	 * @deprecated use the safer methods {@link #cvFillPoly(sj.opencv.jna.highgui.HighguiLibrary.CvArr, sj.opencv.jna.cxcore.CvPoint.ByReference[], int[], int, sj.opencv.jna.cxcore.CvScalar.ByValue, int, int)} and {@link #cvFillPoly(sj.opencv.jna.highgui.HighguiLibrary.CvArr, sj.opencv.jna.cxcore.CvPoint.ByReference[], com.sun.jna.ptr.IntByReference, int, sj.opencv.jna.cxcore.CvScalar.ByValue, int, int)} instead
	 */
	@Deprecated
	void cvFillPoly(CvArr img, PointerByReference pts, IntByReference npts, int contours, CvScalar.ByValue color, int line_type, int shift);
	/**
	 * Fills an area bounded by one or more arbitrary polygons<br>
	 * Original signature : <code>void cvFillPoly(CvArr*, CvPoint**, const int*, int, CvScalar, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3188</i>
	 */
	void cvFillPoly(CvArr img, CvPoint.ByReference pts[], int npts[], int contours, CvScalar.ByValue color, int line_type, int shift);
	/**
	 * Fills an area bounded by one or more arbitrary polygons<br>
	 * Original signature : <code>void cvFillPoly(CvArr*, CvPoint**, const int*, int, CvScalar, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3188</i>
	 */
	void cvFillPoly(CvArr img, CvPoint.ByReference pts[], IntByReference npts, int contours, CvScalar.ByValue color, int line_type, int shift);
	/**
	 * Draws one or more polygonal curves<br>
	 * Original signature : <code>void cvPolyLine(CvArr*, CvPoint**, const int*, int, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3193</i><br>
	 * @deprecated use the safer methods {@link #cvPolyLine(sj.opencv.jna.highgui.HighguiLibrary.CvArr, sj.opencv.jna.cxcore.CvPoint.ByReference[], int[], int, int, sj.opencv.jna.cxcore.CvScalar.ByValue, int, int, int)} and {@link #cvPolyLine(sj.opencv.jna.highgui.HighguiLibrary.CvArr, sj.opencv.jna.cxcore.CvPoint.ByReference[], com.sun.jna.ptr.IntByReference, int, int, sj.opencv.jna.cxcore.CvScalar.ByValue, int, int, int)} instead
	 */
	@Deprecated
	void cvPolyLine(CvArr img, PointerByReference pts, IntByReference npts, int contours, int is_closed, CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws one or more polygonal curves<br>
	 * Original signature : <code>void cvPolyLine(CvArr*, CvPoint**, const int*, int, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3193</i>
	 */
	void cvPolyLine(CvArr img, CvPoint.ByReference pts[], int npts[], int contours, int is_closed, CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Draws one or more polygonal curves<br>
	 * Original signature : <code>void cvPolyLine(CvArr*, CvPoint**, const int*, int, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3193</i>
	 */
	void cvPolyLine(CvArr img, CvPoint.ByReference pts[], IntByReference npts, int contours, int is_closed, CvScalar.ByValue color, int thickness, int line_type, int shift);
	/**
	 * Clips the line segment connecting *pt1 and *pt2<br>
	 * by the rectangular window<br>
	 * (0<=x<img_size.width, 0<=y<img_size.height).<br>
	 * Original signature : <code>int cvClipLine(CvSize, CvPoint*, CvPoint*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3200</i>
	 */
	int cvClipLine(CvSize.ByValue img_size, CvPoint pt1, CvPoint pt2);
	/**
	 * Initializes line iterator. Initially, line_iterator->ptr will point<br>
	 * to pt1 (or pt2, see left_to_right description) location in the image.<br>
	 * Returns the number of pixels on the line between the ending points.<br>
	 * Original signature : <code>int cvInitLineIterator(const CvArr*, CvPoint, CvPoint, CvLineIterator*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3207</i>
	 */
	int cvInitLineIterator(CvArr image, CvPoint.ByValue pt1, CvPoint.ByValue pt2, CvLineIterator line_iterator, int connectivity, int left_to_right);
	/**
	 * Initializes font structure used further in cvPutText<br>
	 * Original signature : <code>void cvInitFont(CvFont*, int, double, double, double, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3232</i>
	 */
	void cvInitFont(CvFont font, int font_face, double hscale, double vscale, double shear, int thickness, int line_type);
	/**
	 * Original signature : <code>CvFont cvFont(double, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3238</i>
	 */
	CvFont.ByValue cvFont(double scale, int thickness);
	/**
	 * Renders text stroke with specified font and color at specified location.<br>
	 * CvFont should be initialized with cvInitFont<br>
	 * Original signature : <code>void cvPutText(CvArr*, const char*, CvPoint, const CvFont*, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3244</i><br>
	 * @deprecated use the safer methods {@link #cvPutText(sj.opencv.jna.highgui.HighguiLibrary.CvArr, java.lang.String, sj.opencv.jna.cxcore.CvPoint.ByValue, sj.opencv.jna.cxcore.CvFont, sj.opencv.jna.cxcore.CvScalar.ByValue)} and {@link #cvPutText(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvPoint.ByValue, sj.opencv.jna.cxcore.CvFont, sj.opencv.jna.cxcore.CvScalar.ByValue)} instead
	 */
	@Deprecated
	void cvPutText(CvArr img, Pointer text, CvPoint.ByValue org, CvFont font, CvScalar.ByValue color);
	/**
	 * Renders text stroke with specified font and color at specified location.<br>
	 * CvFont should be initialized with cvInitFont<br>
	 * Original signature : <code>void cvPutText(CvArr*, const char*, CvPoint, const CvFont*, CvScalar)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3244</i>
	 */
	void cvPutText(CvArr img, String text, CvPoint.ByValue org, CvFont font, CvScalar.ByValue color);
	/**
	 * Calculates bounding box of text stroke (useful for alignment)<br>
	 * Original signature : <code>void cvGetTextSize(const char*, const CvFont*, CvSize*, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3249</i><br>
	 * @deprecated use the safer methods {@link #cvGetTextSize(java.lang.String, sj.opencv.jna.cxcore.CvFont, sj.opencv.jna.cxcore.CvSize, java.nio.IntBuffer)} and {@link #cvGetTextSize(com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvFont, sj.opencv.jna.cxcore.CvSize, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	void cvGetTextSize(Pointer text_string, CvFont font, CvSize text_size, IntByReference baseline);
	/**
	 * Calculates bounding box of text stroke (useful for alignment)<br>
	 * Original signature : <code>void cvGetTextSize(const char*, const CvFont*, CvSize*, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3249</i>
	 */
	void cvGetTextSize(String text_string, CvFont font, CvSize text_size, IntBuffer baseline);
	/**
	 * Unpacks color value, if arrtype is CV_8UC?, <color> is treated as<br>
	 * packed color value, otherwise the first channels (depending on arrtype)<br>
	 * of destination scalar are set to the same value = <color><br>
	 * Original signature : <code>CvScalar cvColorToScalar(double, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3256</i>
	 */
	CvScalar.ByValue cvColorToScalar(double packed_color, int arrtype);
	/**
	 * Returns the polygon points which make up the given ellipse.  The ellipse is define by<br>
	 * the box of size 'axes' rotated 'angle' around the 'center'.  A partial sweep<br>
	 * of the ellipse arc can be done by spcifying arc_start and arc_end to be something<br>
	 * other than 0 and 360, respectively.  The input array 'pts' must be large enough to<br>
	 * hold the result.  The total number of points stored into 'pts' is returned by this<br>
	 * function.<br>
	 * Original signature : <code>int cvEllipse2Poly(CvPoint, CvSize, int, int, int, CvPoint*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3266</i>
	 */
	int cvEllipse2Poly(CvPoint.ByValue center, CvSize.ByValue axes, int angle, int arc_start, int arc_end, CvPoint pts, int delta);
	/**
	 * Draws contour outlines or filled interiors on the image<br>
	 * Original signature : <code>void cvDrawContours(CvArr*, CvSeq*, CvScalar, CvScalar, int, int, int, CvPoint)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3271</i>
	 */
	void cvDrawContours(CvArr img, CvSeq contour, CvScalar.ByValue external_color, CvScalar.ByValue hole_color, int max_level, int thickness, int line_type, CvPoint.ByValue offset);
	/**
	 * Does look-up transformation. Elements of the source array<br>
	 * (that should be 8uC1 or 8sC1) are used as indexes in lutarr 256-element table<br>
	 * Original signature : <code>void cvLUT(const CvArr*, CvArr*, const CvArr*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3277</i>
	 */
	void cvLUT(CvArr src, CvArr dst, CvArr lut);
	/**
	 * Original signature : <code>void cvInitTreeNodeIterator(CvTreeNodeIterator*, const void*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3285</i>
	 */
	void cvInitTreeNodeIterator(CvTreeNodeIterator tree_iterator, Pointer first, int max_level);
	/**
	 * Original signature : <code>void* cvNextTreeNode(CvTreeNodeIterator*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3287</i>
	 */
	Pointer cvNextTreeNode(CvTreeNodeIterator tree_iterator);
	/**
	 * Original signature : <code>void* cvPrevTreeNode(CvTreeNodeIterator*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3289</i>
	 */
	Pointer cvPrevTreeNode(CvTreeNodeIterator tree_iterator);
	/**
	 * Inserts sequence into tree with specified "parent" sequence.<br>
	 * If parent is equal to frame (e.g. the most external contour),<br>
	 * then added contour will have null pointer to parent.<br>
	 * Original signature : <code>void cvInsertNodeIntoTree(void*, void*, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3296</i>
	 */
	void cvInsertNodeIntoTree(Pointer node, Pointer parent, Pointer frame);
	/**
	 * Removes contour from tree (together with the contour children).<br>
	 * Original signature : <code>void cvRemoveNodeFromTree(void*, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3301</i>
	 */
	void cvRemoveNodeFromTree(Pointer node, Pointer frame);
	/**
	 * Gathers pointers to all the sequences,<br>
	 * accessible from the <first>, to the single sequence<br>
	 * Original signature : <code>CvSeq* cvTreeToNodeSeq(const void*, int, CvMemStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3307</i>
	 */
	CvSeq cvTreeToNodeSeq(Pointer first, int header_size, CvMemStorage storage);
	/**
	 * Original signature : <code>int cvKMeans2(const CvArr*, int, CvArr*, CvTermCriteria, int, CvRNG*, int, CvArr*, double*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3309</i><br>
	 * @deprecated use the safer methods {@link #cvKMeans2(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, sj.opencv.jna.highgui.HighguiLibrary.CvArr, sj.opencv.jna.cxcore.CvTermCriteria.ByValue, int, java.nio.LongBuffer, int, sj.opencv.jna.highgui.HighguiLibrary.CvArr, java.nio.DoubleBuffer)} and {@link #cvKMeans2(sj.opencv.jna.highgui.HighguiLibrary.CvArr, int, sj.opencv.jna.highgui.HighguiLibrary.CvArr, sj.opencv.jna.cxcore.CvTermCriteria.ByValue, int, com.sun.jna.ptr.LongByReference, int, sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.DoubleByReference)} instead
	 */
//	@Deprecated
//	int cvKMeans2(CvArr samples, int cluster_count, CvArr labels, sj.opencv.jna.cxcore.CvTermCriteria.ByValue termcrit, int attempts, LongByReference rng, int flags, CvArr _centers, DoubleByReference compactness);
	/**
	 * Original signature : <code>int cvKMeans2(const CvArr*, int, CvArr*, CvTermCriteria, int, CvRNG*, int, CvArr*, double*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3309</i>
	 */
	int cvKMeans2(CvArr samples, int cluster_count, CvArr labels, sj.opencv.jna.cxcore.CvTermCriteria.ByValue termcrit, int attempts, LongBuffer rng, int flags, CvArr _centers, DoubleBuffer compactness);
	/**
	 * Add the function pointers table with associated information to the IPP primitives list<br>
	 * Original signature : <code>int cvRegisterModule(const CvModuleInfo*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3314</i>
	 */
	int cvRegisterModule(CvModuleInfo module_info);
	/**
	 * Loads optimized functions from IPP, MKL etc. or switches back to pure C code<br>
	 * Original signature : <code>int cvUseOptimized(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3319</i>
	 */
	int cvUseOptimized(int on_off);
	/**
	 * Retrieves information about the registered modules and loaded optimized plugins<br>
	 * Original signature : <code>void cvGetModuleInfo(const char*, const char**, const char**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3324</i><br>
	 * @deprecated use the safer methods {@link #cvGetModuleInfo(java.lang.String, java.lang.String[], java.lang.String[])} and {@link #cvGetModuleInfo(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void cvGetModuleInfo(Pointer module_name, PointerByReference version, PointerByReference loaded_addon_plugins);
	/**
	 * Retrieves information about the registered modules and loaded optimized plugins<br>
	 * Original signature : <code>void cvGetModuleInfo(const char*, const char**, const char**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3324</i>
	 */
	void cvGetModuleInfo(String module_name, String version[], String loaded_addon_plugins[]);
	/**
	 * Set user-defined memory managment functions (substitutors for malloc and free) that<br>
	 * will be called by cvAlloc, cvFree and higher-level functions (e.g. cvCreateImage)<br>
	 * Original signature : <code>void cvSetMemoryManager(CvAllocFunc, CvFreeFunc, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3332</i>
	 */
	void cvSetMemoryManager(CxcoreLibrary.CvAllocFunc alloc_func, CxcoreLibrary.CvFreeFunc free_func, Pointer userdata);
	/**
	 * Makes OpenCV use IPL functions for IplImage allocation/deallocation<br>
	 * Original signature : <code>void cvSetIPLAllocators(Cv_iplCreateImageHeader, Cv_iplAllocateImageData, Cv_iplDeallocate, Cv_iplCreateROI, Cv_iplCloneImage)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3342</i>
	 */
	void cvSetIPLAllocators(CxcoreLibrary.Cv_iplCreateImageHeader create_header, CxcoreLibrary.Cv_iplAllocateImageData allocate_data, CxcoreLibrary.Cv_iplDeallocate deallocate, CxcoreLibrary.Cv_iplCreateROI create_roi, CxcoreLibrary.Cv_iplCloneImage clone_image);
	/**
	 * opens existing or creates new file storage<br>
	 * Original signature : <code>CvFileStorage* cvOpenFileStorage(const char*, CvMemStorage*, int, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3347</i><br>
	 * @deprecated use the safer methods {@link #cvOpenFileStorage(java.lang.String, sj.opencv.jna.cxcore.CvMemStorage, int, java.lang.String)} and {@link #cvOpenFileStorage(com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvMemStorage, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	CxcoreLibrary.CvFileStorage cvOpenFileStorage(Pointer filename, CvMemStorage memstorage, int flags, Pointer encoding);
	/**
	 * opens existing or creates new file storage<br>
	 * Original signature : <code>CvFileStorage* cvOpenFileStorage(const char*, CvMemStorage*, int, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3347</i>
	 */
	CxcoreLibrary.CvFileStorage cvOpenFileStorage(String filename, CvMemStorage memstorage, int flags, String encoding);
	/**
	 * closes file storage and deallocates buffers<br>
	 * Original signature : <code>void cvReleaseFileStorage(CvFileStorage**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3352</i><br>
	 * @deprecated use the safer method {@link #cvReleaseFileStorage(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage[])} instead
	 */
	@Deprecated
	void cvReleaseFileStorage(PointerByReference fs);
	/**
	 * closes file storage and deallocates buffers<br>
	 * Original signature : <code>void cvReleaseFileStorage(CvFileStorage**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3352</i>
	 */
	void cvReleaseFileStorage(CxcoreLibrary.CvFileStorage fs[]);
	/**
	 * returns attribute value or 0 (NULL) if there is no such attribute<br>
	 * Original signature : <code>char* cvAttrValue(const CvAttrList*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3357</i><br>
	 * @deprecated use the safer methods {@link #cvAttrValue(sj.opencv.jna.cxcore.CvAttrList, java.lang.String)} and {@link #cvAttrValue(sj.opencv.jna.cxcore.CvAttrList, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	Pointer cvAttrValue(CvAttrList attr, Pointer attr_name);
	/**
	 * returns attribute value or 0 (NULL) if there is no such attribute<br>
	 * Original signature : <code>char* cvAttrValue(const CvAttrList*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3357</i>
	 */
	Pointer cvAttrValue(CvAttrList attr, String attr_name);
	/**
	 * starts writing compound structure (map or sequence)<br>
	 * Original signature : <code>void cvStartWriteStruct(CvFileStorage*, const char*, int, const char*, CvAttrList)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3362</i><br>
	 * @deprecated use the safer methods {@link #cvStartWriteStruct(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, int, java.lang.String, sj.opencv.jna.cxcore.CvAttrList.ByValue)} and {@link #cvStartWriteStruct(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvAttrList.ByValue)} instead
	 */
	@Deprecated
	void cvStartWriteStruct(CxcoreLibrary.CvFileStorage fs, Pointer name, int struct_flags, Pointer type_name, CvAttrList.ByValue attributes);
	/**
	 * starts writing compound structure (map or sequence)<br>
	 * Original signature : <code>void cvStartWriteStruct(CvFileStorage*, const char*, int, const char*, CvAttrList)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3362</i>
	 */
	void cvStartWriteStruct(CxcoreLibrary.CvFileStorage fs, String name, int struct_flags, String type_name, CvAttrList.ByValue attributes);
	/**
	 * finishes writing compound structure<br>
	 * Original signature : <code>void cvEndWriteStruct(CvFileStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3367</i>
	 */
	void cvEndWriteStruct(CxcoreLibrary.CvFileStorage fs);
	/**
	 * writes an integer<br>
	 * Original signature : <code>void cvWriteInt(CvFileStorage*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3372</i><br>
	 * @deprecated use the safer methods {@link #cvWriteInt(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, int)} and {@link #cvWriteInt(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	void cvWriteInt(CxcoreLibrary.CvFileStorage fs, Pointer name, int value);
	/**
	 * writes an integer<br>
	 * Original signature : <code>void cvWriteInt(CvFileStorage*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3372</i>
	 */
	void cvWriteInt(CxcoreLibrary.CvFileStorage fs, String name, int value);
	/**
	 * writes a floating-point number<br>
	 * Original signature : <code>void cvWriteReal(CvFileStorage*, const char*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3377</i><br>
	 * @deprecated use the safer methods {@link #cvWriteReal(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, double)} and {@link #cvWriteReal(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, double)} instead
	 */
	@Deprecated
	void cvWriteReal(CxcoreLibrary.CvFileStorage fs, Pointer name, double value);
	/**
	 * writes a floating-point number<br>
	 * Original signature : <code>void cvWriteReal(CvFileStorage*, const char*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3377</i>
	 */
	void cvWriteReal(CxcoreLibrary.CvFileStorage fs, String name, double value);
	/**
	 * writes a string<br>
	 * Original signature : <code>void cvWriteString(CvFileStorage*, const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3382</i><br>
	 * @deprecated use the safer methods {@link #cvWriteString(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, java.lang.String, int)} and {@link #cvWriteString(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	void cvWriteString(CxcoreLibrary.CvFileStorage fs, Pointer name, Pointer str, int quote);
	/**
	 * writes a string<br>
	 * Original signature : <code>void cvWriteString(CvFileStorage*, const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3382</i>
	 */
	void cvWriteString(CxcoreLibrary.CvFileStorage fs, String name, String str, int quote);
	/**
	 * writes a comment<br>
	 * Original signature : <code>void cvWriteComment(CvFileStorage*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3387</i><br>
	 * @deprecated use the safer methods {@link #cvWriteComment(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, int)} and {@link #cvWriteComment(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	void cvWriteComment(CxcoreLibrary.CvFileStorage fs, Pointer comment, int eol_comment);
	/**
	 * writes a comment<br>
	 * Original signature : <code>void cvWriteComment(CvFileStorage*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3387</i>
	 */
	void cvWriteComment(CxcoreLibrary.CvFileStorage fs, String comment, int eol_comment);
	/**
	 * writes instance of a standard type (matrix, image, sequence, graph etc.)<br>
	 * or user-defined type<br>
	 * Original signature : <code>void cvWrite(CvFileStorage*, const char*, const void*, CvAttrList)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3393</i><br>
	 * @deprecated use the safer methods {@link #cvWrite(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvAttrList.ByValue)} and {@link #cvWrite(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvAttrList.ByValue)} instead
	 */
	@Deprecated
	void cvWrite(CxcoreLibrary.CvFileStorage fs, Pointer name, Pointer ptr, CvAttrList.ByValue attributes);
	/**
	 * writes instance of a standard type (matrix, image, sequence, graph etc.)<br>
	 * or user-defined type<br>
	 * Original signature : <code>void cvWrite(CvFileStorage*, const char*, const void*, CvAttrList)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3393</i>
	 */
	void cvWrite(CxcoreLibrary.CvFileStorage fs, String name, Pointer ptr, CvAttrList.ByValue attributes);
	/**
	 * starts the next stream<br>
	 * Original signature : <code>void cvStartNextStream(CvFileStorage*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3398</i>
	 */
	void cvStartNextStream(CxcoreLibrary.CvFileStorage fs);
	/**
	 * helper function: writes multiple integer or floating-point numbers<br>
	 * Original signature : <code>void cvWriteRawData(CvFileStorage*, const void*, int, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3403</i><br>
	 * @deprecated use the safer methods {@link #cvWriteRawData(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int, java.lang.String)} and {@link #cvWriteRawData(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvWriteRawData(CxcoreLibrary.CvFileStorage fs, Pointer src, int len, Pointer dt);
	/**
	 * helper function: writes multiple integer or floating-point numbers<br>
	 * Original signature : <code>void cvWriteRawData(CvFileStorage*, const void*, int, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3403</i>
	 */
	void cvWriteRawData(CxcoreLibrary.CvFileStorage fs, Pointer src, int len, String dt);
	/**
	 * returns the hash entry corresponding to the specified literal key string or 0<br>
	 * if there is no such a key in the storage<br>
	 * Original signature : <code>CvStringHashNode* cvGetHashedKey(CvFileStorage*, const char*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3409</i><br>
	 * @deprecated use the safer methods {@link #cvGetHashedKey(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, int, int)} and {@link #cvGetHashedKey(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated
	CvStringHashNode cvGetHashedKey(CxcoreLibrary.CvFileStorage fs, Pointer name, int len, int create_missing);
	/**
	 * returns the hash entry corresponding to the specified literal key string or 0<br>
	 * if there is no such a key in the storage<br>
	 * Original signature : <code>CvStringHashNode* cvGetHashedKey(CvFileStorage*, const char*, int, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3409</i>
	 */
	CvStringHashNode cvGetHashedKey(CxcoreLibrary.CvFileStorage fs, String name, int len, int create_missing);
	/**
	 * returns file node with the specified key within the specified map<br>
	 * (collection of named nodes)<br>
	 * Original signature : <code>CvFileNode* cvGetRootFileNode(const CvFileStorage*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3415</i><br>
	 * @deprecated use the safer methods {@link #cvGetRootFileNode(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage[], int)} and {@link #cvGetRootFileNode(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, int)} instead
	 */
	@Deprecated
	CvFileNode cvGetRootFileNode(CxcoreLibrary.CvFileStorage fs, int stream_index);
	/**
	 * returns file node with the specified key within the specified map<br>
	 * (collection of named nodes)<br>
	 * Original signature : <code>CvFileNode* cvGetRootFileNode(const CvFileStorage*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3415</i>
	 */
	CvFileNode cvGetRootFileNode(CxcoreLibrary.CvFileStorage fs[], int stream_index);
	/**
	 * returns file node with the specified key within the specified map<br>
	 * (collection of named nodes)<br>
	 * Original signature : <code>CvFileNode* cvGetFileNode(CvFileStorage*, CvFileNode*, const CvStringHashNode*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3421</i>
	 */
	CvFileNode cvGetFileNode(CxcoreLibrary.CvFileStorage fs, CvFileNode map, CvStringHashNode key, int create_missing);
	/**
	 * this is a slower version of cvGetFileNode that takes the key as a literal string<br>
	 * Original signature : <code>CvFileNode* cvGetFileNodeByName(const CvFileStorage*, const CvFileNode*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3426</i><br>
	 * @deprecated use the safer methods {@link #cvGetFileNodeByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage[], sj.opencv.jna.cxcore.CvFileNode, java.lang.String)} and {@link #cvGetFileNodeByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, sj.opencv.jna.cxcore.CvFileNode, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	CvFileNode cvGetFileNodeByName(CxcoreLibrary.CvFileStorage fs, CvFileNode map, Pointer name);
	/**
	 * this is a slower version of cvGetFileNode that takes the key as a literal string<br>
	 * Original signature : <code>CvFileNode* cvGetFileNodeByName(const CvFileStorage*, const CvFileNode*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3426</i>
	 */
	CvFileNode cvGetFileNodeByName(CxcoreLibrary.CvFileStorage fs[], CvFileNode map, String name);
	/**
	 * Original signature : <code>int cvReadInt(const CvFileNode*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3430</i>
	 */
	int cvReadInt(CvFileNode node, int default_value);
	/**
	 * Original signature : <code>int cvReadIntByName(const CvFileStorage*, const CvFileNode*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3434</i><br>
	 * @deprecated use the safer methods {@link #cvReadIntByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage[], sj.opencv.jna.cxcore.CvFileNode, java.lang.String, int)} and {@link #cvReadIntByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, sj.opencv.jna.cxcore.CvFileNode, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	int cvReadIntByName(CxcoreLibrary.CvFileStorage fs, CvFileNode map, Pointer name, int default_value);
	/**
	 * Original signature : <code>int cvReadIntByName(const CvFileStorage*, const CvFileNode*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3434</i>
	 */
	int cvReadIntByName(CxcoreLibrary.CvFileStorage fs[], CvFileNode map, String name, int default_value);
	/**
	 * Original signature : <code>double cvReadReal(const CvFileNode*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3438</i>
	 */
	double cvReadReal(CvFileNode node, double default_value);
	/**
	 * Original signature : <code>double cvReadRealByName(const CvFileStorage*, const CvFileNode*, const char*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3442</i><br>
	 * @deprecated use the safer methods {@link #cvReadRealByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage[], sj.opencv.jna.cxcore.CvFileNode, java.lang.String, double)} and {@link #cvReadRealByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, sj.opencv.jna.cxcore.CvFileNode, com.sun.jna.Pointer, double)} instead
	 */
	@Deprecated
	double cvReadRealByName(CxcoreLibrary.CvFileStorage fs, CvFileNode map, Pointer name, double default_value);
	/**
	 * Original signature : <code>double cvReadRealByName(const CvFileStorage*, const CvFileNode*, const char*, double)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3442</i>
	 */
	double cvReadRealByName(CxcoreLibrary.CvFileStorage fs[], CvFileNode map, String name, double default_value);
	/**
	 * Original signature : <code>char* cvReadString(const CvFileNode*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3446</i><br>
	 * @deprecated use the safer methods {@link #cvReadString(sj.opencv.jna.cxcore.CvFileNode, java.lang.String)} and {@link #cvReadString(sj.opencv.jna.cxcore.CvFileNode, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	Pointer cvReadString(CvFileNode node, Pointer default_value);
	/**
	 * Original signature : <code>char* cvReadString(const CvFileNode*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3446</i>
	 */
	Pointer cvReadString(CvFileNode node, String default_value);
	/**
	 * Original signature : <code>char* cvReadStringByName(const CvFileStorage*, const CvFileNode*, const char*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3450</i><br>
	 * @deprecated use the safer methods {@link #cvReadStringByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage[], sj.opencv.jna.cxcore.CvFileNode, java.lang.String, java.lang.String)} and {@link #cvReadStringByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, sj.opencv.jna.cxcore.CvFileNode, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	Pointer cvReadStringByName(CxcoreLibrary.CvFileStorage fs, CvFileNode map, Pointer name, Pointer default_value);
	/**
	 * Original signature : <code>char* cvReadStringByName(const CvFileStorage*, const CvFileNode*, const char*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3450</i>
	 */
	Pointer cvReadStringByName(CxcoreLibrary.CvFileStorage fs[], CvFileNode map, String name, String default_value);
	/**
	 * decodes standard or user-defined object and returns it<br>
	 * Original signature : <code>void* cvRead(CvFileStorage*, CvFileNode*, CvAttrList*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3455</i>
	 */
	Pointer cvRead(CxcoreLibrary.CvFileStorage fs, CvFileNode node, CvAttrList attributes);
	/**
	 * decodes standard or user-defined object and returns it<br>
	 * Original signature : <code>void* cvReadByName(CvFileStorage*, const CvFileNode*, const char*, CvAttrList*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3462</i><br>
	 * @deprecated use the safer methods {@link #cvReadByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, sj.opencv.jna.cxcore.CvFileNode, java.lang.String, sj.opencv.jna.cxcore.CvAttrList)} and {@link #cvReadByName(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, sj.opencv.jna.cxcore.CvFileNode, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvAttrList)} instead
	 */
	@Deprecated
	Pointer cvReadByName(CxcoreLibrary.CvFileStorage fs, CvFileNode map, Pointer name, CvAttrList attributes);
	/**
	 * decodes standard or user-defined object and returns it<br>
	 * Original signature : <code>void* cvReadByName(CvFileStorage*, const CvFileNode*, const char*, CvAttrList*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3462</i>
	 */
	Pointer cvReadByName(CxcoreLibrary.CvFileStorage fs, CvFileNode map, String name, CvAttrList attributes);
	/**
	 * starts reading data from sequence or scalar numeric node<br>
	 * Original signature : <code>void cvStartReadRawData(const CvFileStorage*, const CvFileNode*, CvSeqReader*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3467</i><br>
	 * @deprecated use the safer methods {@link #cvStartReadRawData(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage[], sj.opencv.jna.cxcore.CvFileNode, sj.opencv.jna.cxcore.CvSeqReader)} and {@link #cvStartReadRawData(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, sj.opencv.jna.cxcore.CvFileNode, sj.opencv.jna.cxcore.CvSeqReader)} instead
	 */
	@Deprecated
	void cvStartReadRawData(CxcoreLibrary.CvFileStorage fs, CvFileNode src, CvSeqReader reader);
	/**
	 * starts reading data from sequence or scalar numeric node<br>
	 * Original signature : <code>void cvStartReadRawData(const CvFileStorage*, const CvFileNode*, CvSeqReader*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3467</i>
	 */
	void cvStartReadRawData(CxcoreLibrary.CvFileStorage fs[], CvFileNode src, CvSeqReader reader);
	/**
	 * reads multiple numbers and stores them to array<br>
	 * Original signature : <code>void cvReadRawDataSlice(const CvFileStorage*, CvSeqReader*, int, void*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3472</i><br>
	 * @deprecated use the safer methods {@link #cvReadRawDataSlice(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage[], sj.opencv.jna.cxcore.CvSeqReader, int, com.sun.jna.Pointer, java.lang.String)} and {@link #cvReadRawDataSlice(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, sj.opencv.jna.cxcore.CvSeqReader, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvReadRawDataSlice(CxcoreLibrary.CvFileStorage fs, CvSeqReader reader, int count, Pointer dst, Pointer dt);
	/**
	 * reads multiple numbers and stores them to array<br>
	 * Original signature : <code>void cvReadRawDataSlice(const CvFileStorage*, CvSeqReader*, int, void*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3472</i>
	 */
	void cvReadRawDataSlice(CxcoreLibrary.CvFileStorage fs[], CvSeqReader reader, int count, Pointer dst, String dt);
	/**
	 * combination of two previous functions for easier reading of whole sequences<br>
	 * Original signature : <code>void cvReadRawData(const CvFileStorage*, const CvFileNode*, void*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3477</i><br>
	 * @deprecated use the safer methods {@link #cvReadRawData(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage[], sj.opencv.jna.cxcore.CvFileNode, com.sun.jna.Pointer, java.lang.String)} and {@link #cvReadRawData(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, sj.opencv.jna.cxcore.CvFileNode, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvReadRawData(CxcoreLibrary.CvFileStorage fs, CvFileNode src, Pointer dst, Pointer dt);
	/**
	 * combination of two previous functions for easier reading of whole sequences<br>
	 * Original signature : <code>void cvReadRawData(const CvFileStorage*, const CvFileNode*, void*, const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3477</i>
	 */
	void cvReadRawData(CxcoreLibrary.CvFileStorage fs[], CvFileNode src, Pointer dst, String dt);
	/**
	 * writes a copy of file node to file storage<br>
	 * Original signature : <code>void cvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3482</i><br>
	 * @deprecated use the safer methods {@link #cvWriteFileNode(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, java.lang.String, sj.opencv.jna.cxcore.CvFileNode, int)} and {@link #cvWriteFileNode(sj.opencv.jna.cxcore.CxcoreLibrary.CvFileStorage, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvFileNode, int)} instead
	 */
	@Deprecated
	void cvWriteFileNode(CxcoreLibrary.CvFileStorage fs, Pointer new_node_name, CvFileNode node, int embed);
	/**
	 * writes a copy of file node to file storage<br>
	 * Original signature : <code>void cvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3482</i>
	 */
	void cvWriteFileNode(CxcoreLibrary.CvFileStorage fs, String new_node_name, CvFileNode node, int embed);
	/**
	 * returns name of file node<br>
	 * Original signature : <code>char* cvGetFileNodeName(const CvFileNode*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3487</i>
	 */
	Pointer cvGetFileNodeName(CvFileNode node);
	/**
	 * Original signature : <code>void cvRegisterType(const CvTypeInfo*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3489</i>
	 */
	void cvRegisterType(CvTypeInfo info);
	/**
	 * Original signature : <code>void cvUnregisterType(const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3491</i><br>
	 * @deprecated use the safer methods {@link #cvUnregisterType(java.lang.String)} and {@link #cvUnregisterType(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvUnregisterType(Pointer type_name);
	/**
	 * Original signature : <code>void cvUnregisterType(const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3491</i>
	 */
	void cvUnregisterType(String type_name);
	/**
	 * Original signature : <code>CvTypeInfo* cvFirstType()</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3493</i>
	 */
	CvTypeInfo cvFirstType();
	/**
	 * Original signature : <code>CvTypeInfo* cvFindType(const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3495</i><br>
	 * @deprecated use the safer methods {@link #cvFindType(java.lang.String)} and {@link #cvFindType(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	CvTypeInfo cvFindType(Pointer type_name);
	/**
	 * Original signature : <code>CvTypeInfo* cvFindType(const char*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3495</i>
	 */
	CvTypeInfo cvFindType(String type_name);
	/**
	 * Original signature : <code>CvTypeInfo* cvTypeOf(const void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3497</i>
	 */
	CvTypeInfo cvTypeOf(Pointer struct_ptr);
	/**
	 * universal functions<br>
	 * Original signature : <code>void cvRelease(void**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3502</i>
	 */
	void cvRelease(PointerByReference struct_ptr);
	/**
	 * Original signature : <code>void* cvClone(const void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3504</i>
	 */
	Pointer cvClone(Pointer struct_ptr);
	/**
	 * simple API for reading/writing data<br>
	 * Original signature : <code>void cvSave(const char*, const void*, const char*, const char*, CvAttrList)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3509</i><br>
	 * @deprecated use the safer methods {@link #cvSave(java.lang.String, com.sun.jna.Pointer, java.lang.String, java.lang.String, sj.opencv.jna.cxcore.CvAttrList.ByValue)} and {@link #cvSave(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvAttrList.ByValue)} instead
	 */
	@Deprecated
	void cvSave(Pointer filename, Pointer struct_ptr, Pointer name, Pointer comment, CvAttrList.ByValue attributes);
	/**
	 * simple API for reading/writing data<br>
	 * Original signature : <code>void cvSave(const char*, const void*, const char*, const char*, CvAttrList)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3509</i>
	 */
	void cvSave(String filename, Pointer struct_ptr, String name, String comment, CvAttrList.ByValue attributes);
	/**
	 * Original signature : <code>void* cvLoad(const char*, CvMemStorage*, const char*, const char**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3511</i><br>
	 * @deprecated use the safer methods {@link #cvLoad(java.lang.String, sj.opencv.jna.cxcore.CvMemStorage, java.lang.String, java.lang.String[])} and {@link #cvLoad(com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvMemStorage, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer cvLoad(Pointer filename, CvMemStorage memstorage, Pointer name, PointerByReference real_name);
	/**
	 * Original signature : <code>void* cvLoad(const char*, CvMemStorage*, const char*, const char**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3511</i>
	 */
	Pointer cvLoad(String filename, CvMemStorage memstorage, String name, String real_name[]);
	/**
	 * helper functions for RNG initialization and accurate time measurement:<br>
	 * uses internal clock counter on x86<br>
	 * Original signature : <code>int64 cvGetTickCount()</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3517</i>
	 */
	long cvGetTickCount();
	/**
	 * Original signature : <code>double cvGetTickFrequency()</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3519</i>
	 */
	double cvGetTickFrequency();
	/**
	 * Original signature : <code>int cvCheckHardwareSupport(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3521</i>
	 */
	int cvCheckHardwareSupport(int feature);
	/**
	 * retrieve/set the number of threads used in OpenMP implementations<br>
	 * Original signature : <code>int cvGetNumThreads()</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3526</i>
	 */
	int cvGetNumThreads();
	/**
	 * Original signature : <code>void cvSetNumThreads(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3528</i>
	 */
	void cvSetNumThreads(int threads);
	/**
	 * get index of the thread being executed<br>
	 * Original signature : <code>int cvGetThreadNum()</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3533</i>
	 */
	int cvGetThreadNum();
	/**
	 * Get current OpenCV error status<br>
	 * Original signature : <code>int cvGetErrStatus()</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3538</i>
	 */
	int cvGetErrStatus();
	/**
	 * Sets error status silently<br>
	 * Original signature : <code>void cvSetErrStatus(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3543</i>
	 */
	void cvSetErrStatus(int status);
	/**
	 * Retrives current error processing mode<br>
	 * Original signature : <code>int cvGetErrMode()</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3548</i>
	 */
	int cvGetErrMode();
	/**
	 * Sets error processing mode, returns previously used mode<br>
	 * Original signature : <code>int cvSetErrMode(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3553</i>
	 */
	int cvSetErrMode(int mode);
	/**
	 * Sets error status and performs some additonal actions (displaying message box,<br>
	 * writing message to stderr, terminating application etc.)<br>
	 * depending on the current error mode<br>
	 * Original signature : <code>void cvError(int, const char*, const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3560</i><br>
	 * @deprecated use the safer methods {@link #cvError(int, java.lang.String, java.lang.String, java.lang.String, int)} and {@link #cvError(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	void cvError(int status, Pointer func_name, Pointer err_msg, Pointer file_name, int line);
	/**
	 * Sets error status and performs some additonal actions (displaying message box,<br>
	 * writing message to stderr, terminating application etc.)<br>
	 * depending on the current error mode<br>
	 * Original signature : <code>void cvError(int, const char*, const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3560</i>
	 */
	void cvError(int status, String func_name, String err_msg, String file_name, int line);
	/**
	 * Retrieves textual description of the error given its code<br>
	 * Original signature : <code>char* cvErrorStr(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3565</i>
	 */
	Pointer cvErrorStr(int status);
	/**
	 * Retrieves detailed information about the last error occured<br>
	 * Original signature : <code>int cvGetErrInfo(const char**, const char**, const char**, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3570</i><br>
	 * @deprecated use the safer methods {@link #cvGetErrInfo(java.lang.String[], java.lang.String[], java.lang.String[], java.nio.IntBuffer)} and {@link #cvGetErrInfo(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	int cvGetErrInfo(PointerByReference errcode_desc, PointerByReference description, PointerByReference filename, IntByReference line);
	/**
	 * Retrieves detailed information about the last error occured<br>
	 * Original signature : <code>int cvGetErrInfo(const char**, const char**, const char**, int*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3570</i>
	 */
	int cvGetErrInfo(String errcode_desc[], String description[], String filename[], IntBuffer line);
	/**
	 * Maps IPP error codes to the counterparts from OpenCV<br>
	 * Original signature : <code>int cvErrorFromIppStatus(int)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3575</i>
	 */
	int cvErrorFromIppStatus(int ipp_status);
	/**
	 * Assigns a new error-handling function<br>
	 * Original signature : <code>CvErrorCallback cvRedirectError(CvErrorCallback, void*, void**)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3581</i>
	 */
	CxcoreLibrary.CvErrorCallback cvRedirectError(CxcoreLibrary.CvErrorCallback error_handler, Pointer userdata, PointerByReference prev_userdata);
	/**
	 * Output to:<br>
	 * cvNulDevReport - nothing<br>
	 * cvStdErrReport - console(fprintf(stderr,...))<br>
	 * cvGuiBoxReport - MessageBox(WIN32)<br>
	 * Original signature : <code>int cvNulDevReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3589</i><br>
	 * @deprecated use the safer methods {@link #cvNulDevReport(int, java.lang.String, java.lang.String, java.lang.String, int, com.sun.jna.Pointer)} and {@link #cvNulDevReport(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	int cvNulDevReport(int status, Pointer func_name, Pointer err_msg, Pointer file_name, int line, Pointer userdata);
	/**
	 * Output to:<br>
	 * cvNulDevReport - nothing<br>
	 * cvStdErrReport - console(fprintf(stderr,...))<br>
	 * cvGuiBoxReport - MessageBox(WIN32)<br>
	 * Original signature : <code>int cvNulDevReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3589</i>
	 */
	int cvNulDevReport(int status, String func_name, String err_msg, String file_name, int line, Pointer userdata);
	/**
	 * Original signature : <code>int cvStdErrReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3591</i><br>
	 * @deprecated use the safer methods {@link #cvStdErrReport(int, java.lang.String, java.lang.String, java.lang.String, int, com.sun.jna.Pointer)} and {@link #cvStdErrReport(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	int cvStdErrReport(int status, Pointer func_name, Pointer err_msg, Pointer file_name, int line, Pointer userdata);
	/**
	 * Original signature : <code>int cvStdErrReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3591</i>
	 */
	int cvStdErrReport(int status, String func_name, String err_msg, String file_name, int line, Pointer userdata);
	/**
	 * Original signature : <code>int cvGuiBoxReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3593</i><br>
	 * @deprecated use the safer methods {@link #cvGuiBoxReport(int, java.lang.String, java.lang.String, java.lang.String, int, com.sun.jna.Pointer)} and {@link #cvGuiBoxReport(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	int cvGuiBoxReport(int status, Pointer func_name, Pointer err_msg, Pointer file_name, int line, Pointer userdata);
	/**
	 * Original signature : <code>int cvGuiBoxReport(int, const char*, const char*, const char*, int, void*)</code><br>
	 * <i>native declaration : modules/core/include/opencv2/core/core_c.h:3593</i>
	 */
	int cvGuiBoxReport(int status, String func_name, String err_msg, String file_name, int line, Pointer userdata);
	public static class CvFileStorage extends PointerType {
		public CvFileStorage(Pointer address) {
			super(address);
		}
		public CvFileStorage() {
			super();
		}
	};
	public static class IplTileInfo extends PointerType {
		public IplTileInfo(Pointer address) {
			super(address);
		}
		public IplTileInfo() {
			super();
		}
	};
	public static class CvFileNodeHash extends PointerType {
		public CvFileNodeHash(Pointer address) {
			super(address);
		}
		public CvFileNodeHash() {
			super();
		}
	};
}
