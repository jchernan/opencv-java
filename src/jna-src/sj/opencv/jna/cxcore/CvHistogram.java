/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.cxcore;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import sj.opencv.jna.highgui.HighguiLibrary.CvArr;
/**
 * <i>native declaration : modules/core/include/opencv2/core/types_c.h:1537</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvHistogram extends Structure {
	public int type;
	/// C type : CvArr*
	public CvArr bins;
	/**
	 * For uniform histograms.<br>
	 * C type : float[32][2]
	 */
	public float[] thresh = new float[(32) * (2)];
	/**
	 * For non-uniform histograms.<br>
	 * C type : float**
	 */
	public PointerByReference thresh2;
	/**
	 * Embedded matrix header for array histograms.<br>
	 * C type : CvMatND
	 */
	public CvMatND mat;
	public CvHistogram() {
		super();
		initFieldOrder();
	}
	public CvHistogram(Pointer p){
		super(p);
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"type", "bins", "thresh", "thresh2", "mat"});
	}
	/**
	 * @param bins C type : CvArr*<br>
	 * @param thresh For uniform histograms.<br>
	 * C type : float[32][2]<br>
	 * @param thresh2 For non-uniform histograms.<br>
	 * C type : float**<br>
	 * @param mat Embedded matrix header for array histograms.<br>
	 * C type : CvMatND
	 */
	public CvHistogram(int type, CvArr bins, float thresh[], PointerByReference thresh2, CvMatND mat) {
		super();
		this.type = type;
		this.bins = bins;
		if (thresh.length != this.thresh.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.thresh = thresh;
		this.thresh2 = thresh2;
		this.mat = mat;
		initFieldOrder();
	}
	
	public static class ByReference extends CvHistogram implements Structure.ByReference {
		public ByReference(Pointer p){
			super(p);
		}
	};
	public static class ByValue extends CvHistogram implements Structure.ByValue {
		
	};
}
