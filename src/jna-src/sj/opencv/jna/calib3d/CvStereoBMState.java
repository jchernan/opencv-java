/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.calib3d;
import com.sun.jna.Structure;
import sj.opencv.jna.cxcore.CvRect;
/**
 * <i>native declaration : modules/calib3d/include/opencv2/calib3d/calib3d.hpp:5489</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvStereoBMState extends Structure {
	/**
	 * pre-filtering (normalization of input images)<br>
	 * =CV_STEREO_BM_NORMALIZED_RESPONSE now
	 */
	public int preFilterType;
	/// averaging window size: ~5x5..21x21
	public int preFilterSize;
	/// the output of pre-filtering is clipped by [-preFilterCap,preFilterCap]
	public int preFilterCap;
	/**
	 * correspondence using Sum of Absolute Difference (SAD)<br>
	 * ~5x5..21x21
	 */
	public int SADWindowSize;
	/// minimum disparity (can be negative)
	public int minDisparity;
	/// maximum disparity - minimum disparity (> 0)
	public int numberOfDisparities;
	/**
	 * post-filtering<br>
	 * the disparity is only computed for pixels
	 */
	public int textureThreshold;
	/**
	 * with textured enough neighborhood<br>
	 * accept the computed disparity d* only if
	 */
	public int uniquenessRatio;
	/**
	 * for any d != d*+/-1 within the search range.<br>
	 * disparity variation window
	 */
	public int speckleWindowSize;
	/// acceptable range of variation in window
	public int speckleRange;
	/// if 1, the results may be more accurate,
	public int trySmallerWindows;
	/**
	 * at the expense of slower processing<br>
	 * C type : CvRect
	 */
	public CvRect roi1;
	/**
	 * at the expense of slower processing<br>
	 * C type : CvRect
	 */
	public CvRect roi2;
	public int disp12MaxDiff;
	/**
	 * temporary buffers<br>
	 * C type : CvMat*
	 */
	public sj.opencv.jna.cxcore.CvMat.ByReference preFilteredImg0;
	/// C type : CvMat*
	public sj.opencv.jna.cxcore.CvMat.ByReference preFilteredImg1;
	/// C type : CvMat*
	public sj.opencv.jna.cxcore.CvMat.ByReference slidingSumBuf;
	/// C type : CvMat*
	public sj.opencv.jna.cxcore.CvMat.ByReference cost;
	/// C type : CvMat*
	public sj.opencv.jna.cxcore.CvMat.ByReference disp;
	public CvStereoBMState() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"preFilterType", "preFilterSize", "preFilterCap", "SADWindowSize", "minDisparity", "numberOfDisparities", "textureThreshold", "uniquenessRatio", "speckleWindowSize", "speckleRange", "trySmallerWindows", "roi1", "roi2", "disp12MaxDiff", "preFilteredImg0", "preFilteredImg1", "slidingSumBuf", "cost", "disp"});
	}
	public static class ByReference extends CvStereoBMState implements Structure.ByReference {
		
	};
	public static class ByValue extends CvStereoBMState implements Structure.ByValue {
		
	};
}
