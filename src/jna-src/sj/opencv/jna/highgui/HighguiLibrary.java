/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.highgui;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;
import sj.opencv.jna.cxcore.CvFont;
import sj.opencv.jna.cxcore.CvMat;
import sj.opencv.jna.cxcore.CxcoreLibrary.CvButtonCallback;
import sj.opencv.jna.cxcore.CxcoreLibrary.CvMouseCallback;
import sj.opencv.jna.cxcore.CxcoreLibrary.CvOpenGlDrawCallback;
import sj.opencv.jna.cxcore.CxcoreLibrary.CvTrackbarCallback2;
import sj.opencv.jna.cxcore.CxcoreLibrary.CvTrackbarCallback;
import sj.opencv.jna.cxcore.JNAIplImage;
/**
 * JNA Wrapper for library <b>highgui</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface HighguiLibrary extends Library {
	/// QFont::Light,
	public static final int CV_FONT_LIGHT = (int)25;
	/// QFont::Normal,
	public static final int CV_FONT_NORMAL = (int)50;
	/// QFont::DemiBold,
	public static final int CV_FONT_DEMIBOLD = (int)63;
	/// QFont::Bold,
	public static final int CV_FONT_BOLD = (int)75;
	/// QFont::Black
	public static final int CV_FONT_BLACK = (int)87;
	/// QFont::StyleNormal,
	public static final int CV_STYLE_NORMAL = (int)0;
	/// QFont::StyleItalic,
	public static final int CV_STYLE_ITALIC = (int)1;
	/// QFont::StyleOblique
	public static final int CV_STYLE_OBLIQUE = (int)2;
	public static final int CV_PUSH_BUTTON = (int)0;
	public static final int CV_CHECKBOX = (int)1;
	public static final int CV_RADIOBOX = (int)2;
	/**
	 * These 3 flags are used by cvSet/GetWindowProperty<br>
	 * to change/get window's fullscreen property
	 */
	public static final int CV_WND_PROP_FULLSCREEN = (int)0;
	/// to change/get window's autosize property
	public static final int CV_WND_PROP_AUTOSIZE = (int)1;
	/// to change/get window's aspectratio property
	public static final int CV_WND_PROP_ASPECTRATIO = (int)2;
	/// to change/get window's opengl support
	public static final int CV_WND_PROP_OPENGL = (int)3;
	/**
	 * These 2 flags are used by cvNamedWindow and cvSet/GetWindowProperty<br>
	 * the user can resize the window (no constraint)  / also use to switch a fullscreen window to a normal size
	 */
	public static final int CV_WINDOW_NORMAL = (int)0;
	/// the user cannot resize the window, the size is constrainted by the image displayed
	public static final int CV_WINDOW_AUTOSIZE = (int)1;
	/// window with opengl support
	public static final int CV_WINDOW_OPENGL = (int)4096;
	/**
	 * Those flags are only for Qt<br>
	 * status bar and tool bar
	 */
	public static final int CV_GUI_EXPANDED = (int)0;
	/// old fashious way
	public static final int CV_GUI_NORMAL = (int)16;
	/**
	 * These 3 flags are used by cvNamedWindow and cvSet/GetWindowProperty<br>
	 * change the window to fullscreen
	 */
	public static final int CV_WINDOW_FULLSCREEN = (int)1;
	/// the image expends as much as it can (no ratio constraint)
	public static final int CV_WINDOW_FREERATIO = (int)256;
	/// the ration image is respected.
	public static final int CV_WINDOW_KEEPRATIO = (int)0;
	public static final int CV_EVENT_MOUSEMOVE = (int)0;
	public static final int CV_EVENT_LBUTTONDOWN = (int)1;
	public static final int CV_EVENT_RBUTTONDOWN = (int)2;
	public static final int CV_EVENT_MBUTTONDOWN = (int)3;
	public static final int CV_EVENT_LBUTTONUP = (int)4;
	public static final int CV_EVENT_RBUTTONUP = (int)5;
	public static final int CV_EVENT_MBUTTONUP = (int)6;
	public static final int CV_EVENT_LBUTTONDBLCLK = (int)7;
	public static final int CV_EVENT_RBUTTONDBLCLK = (int)8;
	public static final int CV_EVENT_MBUTTONDBLCLK = (int)9;
	public static final int CV_EVENT_FLAG_LBUTTON = (int)1;
	public static final int CV_EVENT_FLAG_RBUTTON = (int)2;
	public static final int CV_EVENT_FLAG_MBUTTON = (int)4;
	public static final int CV_EVENT_FLAG_CTRLKEY = (int)8;
	public static final int CV_EVENT_FLAG_SHIFTKEY = (int)16;
	public static final int CV_EVENT_FLAG_ALTKEY = (int)32;
	/// 8bit, color or not
	public static final int CV_LOAD_IMAGE_UNCHANGED = (int)-1;
	/// 8bit, gray
	public static final int CV_LOAD_IMAGE_GRAYSCALE = (int)0;
	/// ?, color
	public static final int CV_LOAD_IMAGE_COLOR = (int)1;
	/// any depth, ?
	public static final int CV_LOAD_IMAGE_ANYDEPTH = (int)2;
	/// ?, any color
	public static final int CV_LOAD_IMAGE_ANYCOLOR = (int)4;
	public static final int CV_IMWRITE_JPEG_QUALITY = (int)1;
	public static final int CV_IMWRITE_PNG_COMPRESSION = (int)16;
	public static final int CV_IMWRITE_PNG_STRATEGY = (int)17;
	public static final int CV_IMWRITE_PNG_STRATEGY_DEFAULT = (int)0;
	public static final int CV_IMWRITE_PNG_STRATEGY_FILTERED = (int)1;
	public static final int CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY = (int)2;
	public static final int CV_IMWRITE_PNG_STRATEGY_RLE = (int)3;
	public static final int CV_IMWRITE_PNG_STRATEGY_FIXED = (int)4;
	public static final int CV_IMWRITE_PXM_BINARY = (int)32;
	public static final int CV_CVTIMG_FLIP = (int)1;
	public static final int CV_CVTIMG_SWAP_RB = (int)2;
	/// autodetect
	public static final int CV_CAP_ANY = (int)0;
	/// MIL proprietary drivers
	public static final int CV_CAP_MIL = (int)100;
	/// platform native
	public static final int CV_CAP_VFW = (int)200;
	public static final int CV_CAP_V4L = (int)200;
	public static final int CV_CAP_V4L2 = (int)200;
	/// IEEE 1394 drivers
	public static final int CV_CAP_FIREWARE = (int)300;
	public static final int CV_CAP_FIREWIRE = (int)300;
	public static final int CV_CAP_IEEE1394 = (int)300;
	public static final int CV_CAP_DC1394 = (int)300;
	public static final int CV_CAP_CMU1394 = (int)300;
	/// TYZX proprietary drivers
	public static final int CV_CAP_STEREO = (int)400;
	public static final int CV_CAP_TYZX = (int)400;
	public static final int CV_TYZX_LEFT = (int)400;
	public static final int CV_TYZX_RIGHT = (int)401;
	public static final int CV_TYZX_COLOR = (int)402;
	public static final int CV_TYZX_Z = (int)403;
	/// QuickTime
	public static final int CV_CAP_QT = (int)500;
	/// Unicap drivers
	public static final int CV_CAP_UNICAP = (int)600;
	/// DirectShow (via videoInput)
	public static final int CV_CAP_DSHOW = (int)700;
	/// PvAPI, Prosilica GigE SDK
	public static final int CV_CAP_PVAPI = (int)800;
	/// OpenNI (for Kinect)
	public static final int CV_CAP_OPENNI = (int)900;
	/// OpenNI (for Asus Xtion)
	public static final int CV_CAP_OPENNI_ASUS = (int)910;
	/// Android
	public static final int CV_CAP_ANDROID = (int)1000;
	/// XIMEA Camera API
	public static final int CV_CAP_XIAPI = (int)1100;
	/// AVFoundation framework for iOS (OS X Lion will have the same API)
	public static final int CV_CAP_AVFOUNDATION = (int)1200;
	/**
	 * every feature can have only one mode turned on at a time<br>
	 * turn the feature off (not controlled manually nor automatically)
	 */
	public static final int CV_CAP_PROP_DC1394_OFF = (int)-4;
	/// set automatically when a value of the feature is set by the user
	public static final int CV_CAP_PROP_DC1394_MODE_MANUAL = (int)-3;
	public static final int CV_CAP_PROP_DC1394_MODE_AUTO = (int)-2;
	public static final int CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO = (int)-1;
	public static final int CV_CAP_PROP_POS_MSEC = (int)0;
	public static final int CV_CAP_PROP_POS_FRAMES = (int)1;
	public static final int CV_CAP_PROP_POS_AVI_RATIO = (int)2;
	public static final int CV_CAP_PROP_FRAME_WIDTH = (int)3;
	public static final int CV_CAP_PROP_FRAME_HEIGHT = (int)4;
	public static final int CV_CAP_PROP_FPS = (int)5;
	public static final int CV_CAP_PROP_FOURCC = (int)6;
	public static final int CV_CAP_PROP_FRAME_COUNT = (int)7;
	public static final int CV_CAP_PROP_FORMAT = (int)8;
	public static final int CV_CAP_PROP_MODE = (int)9;
	public static final int CV_CAP_PROP_BRIGHTNESS = (int)10;
	public static final int CV_CAP_PROP_CONTRAST = (int)11;
	public static final int CV_CAP_PROP_SATURATION = (int)12;
	public static final int CV_CAP_PROP_HUE = (int)13;
	public static final int CV_CAP_PROP_GAIN = (int)14;
	public static final int CV_CAP_PROP_EXPOSURE = (int)15;
	public static final int CV_CAP_PROP_CONVERT_RGB = (int)16;
	public static final int CV_CAP_PROP_WHITE_BALANCE_BLUE_U = (int)17;
	public static final int CV_CAP_PROP_RECTIFICATION = (int)18;
	public static final int CV_CAP_PROP_MONOCROME = (int)19;
	public static final int CV_CAP_PROP_SHARPNESS = (int)20;
	/// exposure control done by camera,
	public static final int CV_CAP_PROP_AUTO_EXPOSURE = (int)21;
	/// using this feature
	public static final int CV_CAP_PROP_GAMMA = (int)22;
	public static final int CV_CAP_PROP_TEMPERATURE = (int)23;
	public static final int CV_CAP_PROP_TRIGGER = (int)24;
	public static final int CV_CAP_PROP_TRIGGER_DELAY = (int)25;
	public static final int CV_CAP_PROP_WHITE_BALANCE_RED_V = (int)26;
	public static final int CV_CAP_PROP_ZOOM = (int)27;
	public static final int CV_CAP_PROP_FOCUS = (int)28;
	public static final int CV_CAP_PROP_GUID = (int)29;
	public static final int CV_CAP_PROP_ISO_SPEED = (int)30;
	public static final int CV_CAP_PROP_MAX_DC1394 = (int)31;
	public static final int CV_CAP_PROP_BACKLIGHT = (int)32;
	public static final int CV_CAP_PROP_PAN = (int)33;
	public static final int CV_CAP_PROP_TILT = (int)34;
	public static final int CV_CAP_PROP_ROLL = (int)35;
	public static final int CV_CAP_PROP_IRIS = (int)36;
	public static final int CV_CAP_PROP_SETTINGS = (int)37;
	/// property for highgui class CvCapture_Android only
	public static final int CV_CAP_PROP_AUTOGRAB = (int)1024;
	/// readonly, tricky property, returns cpnst char* indeed
	public static final int CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING = (int)1025;
	/// readonly, tricky property, returns cpnst char* indeed
	public static final int CV_CAP_PROP_PREVIEW_FORMAT = (int)1026;
	/// OpenNI map generators
	public static final int CV_CAP_OPENNI_DEPTH_GENERATOR = (int)1 << 31;
	public static final int CV_CAP_OPENNI_IMAGE_GENERATOR = (int)1 << 30;
	public static final int CV_CAP_OPENNI_GENERATORS_MASK = (int)HighguiLibrary.CV_CAP_OPENNI_DEPTH_GENERATOR + HighguiLibrary.CV_CAP_OPENNI_IMAGE_GENERATOR;
	/// Properties of cameras available through OpenNI interfaces
	public static final int CV_CAP_PROP_OPENNI_OUTPUT_MODE = (int)100;
	/// in mm
	public static final int CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH = (int)101;
	/// in mm
	public static final int CV_CAP_PROP_OPENNI_BASELINE = (int)102;
	/// in pixels
	public static final int CV_CAP_PROP_OPENNI_FOCAL_LENGTH = (int)103;
	/// flag
	public static final int CV_CAP_PROP_OPENNI_REGISTRATION = (int)104;
	/// flag that synchronizes the remapping depth map to image map
	public static final int CV_CAP_PROP_OPENNI_REGISTRATION_ON = (int)HighguiLibrary.CV_CAP_PROP_OPENNI_REGISTRATION;
	/// sets this view point to its normal one (if the flag is "off").
	public static final int CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC = (int)105;
	public static final int CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE = (int)106;
	public static final int CV_CAP_PROP_OPENNI_CIRCLE_BUFFER = (int)107;
	public static final int CV_CAP_PROP_OPENNI_MAX_TIME_DURATION = (int)108;
	public static final int CV_CAP_PROP_OPENNI_GENERATOR_PRESENT = (int)109;
	public static final int CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT = (int)HighguiLibrary.CV_CAP_OPENNI_IMAGE_GENERATOR + HighguiLibrary.CV_CAP_PROP_OPENNI_GENERATOR_PRESENT;
	public static final int CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE = (int)HighguiLibrary.CV_CAP_OPENNI_IMAGE_GENERATOR + HighguiLibrary.CV_CAP_PROP_OPENNI_OUTPUT_MODE;
	public static final int CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE = (int)HighguiLibrary.CV_CAP_OPENNI_DEPTH_GENERATOR + HighguiLibrary.CV_CAP_PROP_OPENNI_BASELINE;
	public static final int CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH = (int)HighguiLibrary.CV_CAP_OPENNI_DEPTH_GENERATOR + HighguiLibrary.CV_CAP_PROP_OPENNI_FOCAL_LENGTH;
	public static final int CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION = (int)HighguiLibrary.CV_CAP_OPENNI_DEPTH_GENERATOR + HighguiLibrary.CV_CAP_PROP_OPENNI_REGISTRATION;
	public static final int CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON = (int)HighguiLibrary.CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION;
	/**
	 * Properties of cameras available through GStreamer interface<br>
	 * default is 1
	 */
	public static final int CV_CAP_GSTREAMER_QUEUE_LENGTH = (int)200;
	/// ip for anable multicast master mode. 0 for disable multicast
	public static final int CV_CAP_PROP_PVAPI_MULTICASTIP = (int)300;
	/**
	 * Properties of cameras available through XIMEA SDK interface<br>
	 * Change image resolution by binning or skipping.
	 */
	public static final int CV_CAP_PROP_XI_DOWNSAMPLING = (int)400;
	/// Output data format.
	public static final int CV_CAP_PROP_XI_DATA_FORMAT = (int)401;
	/// Horizontal offset from the origin to the area of interest (in pixels).
	public static final int CV_CAP_PROP_XI_OFFSET_X = (int)402;
	/// Vertical offset from the origin to the area of interest (in pixels).
	public static final int CV_CAP_PROP_XI_OFFSET_Y = (int)403;
	/// Defines source of trigger.
	public static final int CV_CAP_PROP_XI_TRG_SOURCE = (int)404;
	/// Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.
	public static final int CV_CAP_PROP_XI_TRG_SOFTWARE = (int)405;
	/// Selects general purpose input
	public static final int CV_CAP_PROP_XI_GPI_SELECTOR = (int)406;
	/// Set general purpose input mode
	public static final int CV_CAP_PROP_XI_GPI_MODE = (int)407;
	/// Get general purpose level
	public static final int CV_CAP_PROP_XI_GPI_LEVEL = (int)408;
	/// Selects general purpose output
	public static final int CV_CAP_PROP_XI_GPO_SELECTOR = (int)409;
	/// Set general purpose output mode
	public static final int CV_CAP_PROP_XI_GPO_MODE = (int)410;
	/// Selects camera signalling LED
	public static final int CV_CAP_PROP_XI_LED_SELECTOR = (int)411;
	/// Define camera signalling LED functionality
	public static final int CV_CAP_PROP_XI_LED_MODE = (int)412;
	/// Calculates White Balance(must be called during acquisition)
	public static final int CV_CAP_PROP_XI_MANUAL_WB = (int)413;
	/// Automatic white balance
	public static final int CV_CAP_PROP_XI_AUTO_WB = (int)414;
	/// Automatic exposure/gain
	public static final int CV_CAP_PROP_XI_AEAG = (int)415;
	/// Exposure priority (0.5 - exposure 50%, gain 50%).
	public static final int CV_CAP_PROP_XI_EXP_PRIORITY = (int)416;
	/// Maximum limit of exposure in AEAG procedure
	public static final int CV_CAP_PROP_XI_AE_MAX_LIMIT = (int)417;
	/// Maximum limit of gain in AEAG procedure
	public static final int CV_CAP_PROP_XI_AG_MAX_LIMIT = (int)418;
	/// Average intensity of output signal AEAG should achieve(in %)
	public static final int CV_CAP_PROP_XI_AEAG_LEVEL = (int)419;
	/// Image capture timeout in milliseconds
	public static final int CV_CAP_PROP_XI_TIMEOUT = (int)420;
	/// Properties for Android cameras
	public static final int CV_CAP_PROP_ANDROID_FLASH_MODE = (int)8001;
	public static final int CV_CAP_PROP_ANDROID_FOCUS_MODE = (int)8002;
	public static final int CV_CAP_PROP_ANDROID_WHITE_BALANCE = (int)8003;
	public static final int CV_CAP_PROP_ANDROID_ANTIBANDING = (int)8004;
	public static final int CV_CAP_PROP_ANDROID_FOCAL_LENGTH = (int)8005;
	public static final int CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR = (int)8006;
	public static final int CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL = (int)8007;
	public static final int CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR = (int)8008;
	/// Properties of cameras available through AVFOUNDATION interface
	public static final int CV_CAP_PROP_IOS_DEVICE_FOCUS = (int)9001;
	public static final int CV_CAP_PROP_IOS_DEVICE_EXPOSURE = (int)9002;
	public static final int CV_CAP_PROP_IOS_DEVICE_FLASH = (int)9003;
	public static final int CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE = (int)9004;
	public static final int CV_CAP_PROP_IOS_DEVICE_TORCH = (int)9005;
	/**
	 * Data given from depth generator.<br>
	 * Depth values in mm (CV_16UC1)
	 */
	public static final int CV_CAP_OPENNI_DEPTH_MAP = (int)0;
	/// XYZ in meters (CV_32FC3)
	public static final int CV_CAP_OPENNI_POINT_CLOUD_MAP = (int)1;
	/// Disparity in pixels (CV_8UC1)
	public static final int CV_CAP_OPENNI_DISPARITY_MAP = (int)2;
	/// Disparity in pixels (CV_32FC1)
	public static final int CV_CAP_OPENNI_DISPARITY_MAP_32F = (int)3;
	/// CV_8UC1
	public static final int CV_CAP_OPENNI_VALID_DEPTH_MASK = (int)4;
	/// Data given from RGB image generator.
	public static final int CV_CAP_OPENNI_BGR_IMAGE = (int)5;
	public static final int CV_CAP_OPENNI_GRAY_IMAGE = (int)6;
	public static final int CV_CAP_OPENNI_VGA_30HZ = (int)0;
	public static final int CV_CAP_OPENNI_SXGA_15HZ = (int)1;
	public static final int CV_CAP_OPENNI_SXGA_30HZ = (int)2;
	/// BGR
	public static final int CV_CAP_ANDROID_COLOR_FRAME_BGR = (int)0;
	public static final int CV_CAP_ANDROID_COLOR_FRAME = (int)HighguiLibrary.CV_CAP_ANDROID_COLOR_FRAME_BGR;
	/// Y
	public static final int CV_CAP_ANDROID_GREY_FRAME = (int)1;
	public static final int CV_CAP_ANDROID_COLOR_FRAME_RGB = (int)2;
	public static final int CV_CAP_ANDROID_COLOR_FRAME_BGRA = (int)3;
	public static final int CV_CAP_ANDROID_COLOR_FRAME_RGBA = (int)4;
	public static final int CV_CAP_ANDROID_FLASH_MODE_AUTO = (int)0;
	public static final int CV_CAP_ANDROID_FLASH_MODE_OFF = (int)1;
	public static final int CV_CAP_ANDROID_FLASH_MODE_ON = (int)2;
	public static final int CV_CAP_ANDROID_FLASH_MODE_RED_EYE = (int)3;
	public static final int CV_CAP_ANDROID_FLASH_MODE_TORCH = (int)4;
	public static final int CV_CAP_ANDROID_FOCUS_MODE_AUTO = (int)0;
	public static final int CV_CAP_ANDROID_FOCUS_MODE_CONTINUOUS_VIDEO = (int)1;
	public static final int CV_CAP_ANDROID_FOCUS_MODE_EDOF = (int)2;
	public static final int CV_CAP_ANDROID_FOCUS_MODE_FIXED = (int)3;
	public static final int CV_CAP_ANDROID_FOCUS_MODE_INFINITY = (int)4;
	public static final int CV_CAP_ANDROID_FOCUS_MODE_MACRO = (int)5;
	public static final int CV_CAP_ANDROID_WHITE_BALANCE_AUTO = (int)0;
	public static final int CV_CAP_ANDROID_WHITE_BALANCE_CLOUDY_DAYLIGHT = (int)1;
	public static final int CV_CAP_ANDROID_WHITE_BALANCE_DAYLIGHT = (int)2;
	public static final int CV_CAP_ANDROID_WHITE_BALANCE_FLUORESCENT = (int)3;
	public static final int CV_CAP_ANDROID_WHITE_BALANCE_INCANDESCENT = (int)4;
	public static final int CV_CAP_ANDROID_WHITE_BALANCE_SHADE = (int)5;
	public static final int CV_CAP_ANDROID_WHITE_BALANCE_TWILIGHT = (int)6;
	public static final int CV_CAP_ANDROID_WHITE_BALANCE_WARM_FLUORESCENT = (int)7;
	public static final int CV_CAP_ANDROID_ANTIBANDING_50HZ = (int)0;
	public static final int CV_CAP_ANDROID_ANTIBANDING_60HZ = (int)1;
	public static final int CV_CAP_ANDROID_ANTIBANDING_AUTO = (int)2;
	public static final int CV_CAP_ANDROID_ANTIBANDING_OFF = (int)3;
	/// <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h</i>
	public static final int CV_FOURCC_PROMPT = (int)-1;
	/// <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5529</i>
	/// <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5529</i>
	public interface cvStartLoop_pt2Func_callback extends Callback {
		int apply(int argc, PointerByReference argv);
	};
	/**
	 * and alpha= 0 <-> 0xFF (not transparent <-> transparent)<br>
	 * Original signature : <code>CvFont cvFontQt(const char*, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4631</i><br>
	 * @deprecated use the safer methods {@link #cvFontQt(java.lang.String, int, sj.opencv.jna.cxcore.CvScalar.ByValue, int, int, int)} and {@link #cvFontQt(com.sun.jna.Pointer, int, sj.opencv.jna.cxcore.CvScalar.ByValue, int, int, int)} instead
	 */
	@Deprecated
	CvFont.ByValue cvFontQt(Pointer nameFont, int pointSize, sj.opencv.jna.cxcore.CvScalar.ByValue color, int weight, int style, int spacing);
	/**
	 * and alpha= 0 <-> 0xFF (not transparent <-> transparent)<br>
	 * Original signature : <code>CvFont cvFontQt(const char*, int, CvScalar, int, int, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4631</i>
	 */
	CvFont.ByValue cvFontQt(String nameFont, int pointSize, sj.opencv.jna.cxcore.CvScalar.ByValue color, int weight, int style, int spacing);
	/**
	 * Original signature : <code>void cvAddText(const CvArr*, const char*, CvPoint, CvFont*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4633</i><br>
	 * @deprecated use the safer methods {@link #cvAddText(sj.opencv.jna.highgui.HighguiLibrary.CvArr, java.lang.String, sj.opencv.jna.cxcore.CvPoint.ByValue, sj.opencv.jna.cxcore.CvFont)} and {@link #cvAddText(sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvPoint.ByValue, sj.opencv.jna.cxcore.CvFont)} instead
	 */
	@Deprecated
	void cvAddText(HighguiLibrary.CvArr img, Pointer text, sj.opencv.jna.cxcore.CvPoint.ByValue org, CvFont arg2);
	/**
	 * Original signature : <code>void cvAddText(const CvArr*, const char*, CvPoint, CvFont*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4633</i>
	 */
	void cvAddText(HighguiLibrary.CvArr img, String text, sj.opencv.jna.cxcore.CvPoint.ByValue org, CvFont arg2);
	/**
	 * Original signature : <code>void cvDisplayOverlay(const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4635</i><br>
	 * @deprecated use the safer methods {@link #cvDisplayOverlay(java.lang.String, java.lang.String, int)} and {@link #cvDisplayOverlay(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	void cvDisplayOverlay(Pointer name, Pointer text, int delayms);
	/**
	 * Original signature : <code>void cvDisplayOverlay(const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4635</i>
	 */
	void cvDisplayOverlay(String name, String text, int delayms);
	/**
	 * Original signature : <code>void cvDisplayStatusBar(const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4637</i><br>
	 * @deprecated use the safer methods {@link #cvDisplayStatusBar(java.lang.String, java.lang.String, int)} and {@link #cvDisplayStatusBar(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	void cvDisplayStatusBar(Pointer name, Pointer text, int delayms);
	/**
	 * Original signature : <code>void cvDisplayStatusBar(const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4637</i>
	 */
	void cvDisplayStatusBar(String name, String text, int delayms);
	/**
	 * Original signature : <code>void cvSaveWindowParameters(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4639</i><br>
	 * @deprecated use the safer methods {@link #cvSaveWindowParameters(java.lang.String)} and {@link #cvSaveWindowParameters(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvSaveWindowParameters(Pointer name);
	/**
	 * Original signature : <code>void cvSaveWindowParameters(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4639</i>
	 */
	void cvSaveWindowParameters(String name);
	/**
	 * Original signature : <code>void cvLoadWindowParameters(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4641</i><br>
	 * @deprecated use the safer methods {@link #cvLoadWindowParameters(java.lang.String)} and {@link #cvLoadWindowParameters(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvLoadWindowParameters(Pointer name);
	/**
	 * Original signature : <code>void cvLoadWindowParameters(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4641</i>
	 */
	void cvLoadWindowParameters(String name);
	/**
	 * Original signature : <code>int cvStartLoop(cvStartLoop_pt2Func_callback, int, char*[])</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4643</i>
	 */
	int cvStartLoop(HighguiLibrary.cvStartLoop_pt2Func_callback arg, int argc, PointerByReference argv);
	/**
	 * Original signature : <code>void cvStopLoop()</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4645</i>
	 */
	void cvStopLoop();
	/**
	 * Original signature : <code>int cvCreateButton(const char*, CvButtonCallback, void*, int, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4653</i><br>
	 * @deprecated use the safer methods {@link #cvCreateButton(java.lang.String, sj.opencv.jna.cxcore.CxcoreLibrary.CvButtonCallback, com.sun.jna.Pointer, int, int)} and {@link #cvCreateButton(com.sun.jna.Pointer, sj.opencv.jna.cxcore.CxcoreLibrary.CvButtonCallback, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated
	int cvCreateButton(Pointer button_name, CvButtonCallback on_change, Pointer userdata, int button_type, int initial_button_state);
	/**
	 * Original signature : <code>int cvCreateButton(const char*, CvButtonCallback, void*, int, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4653</i>
	 */
	int cvCreateButton(String button_name, CvButtonCallback on_change, Pointer userdata, int button_type, int initial_button_state);
	/**
	 * this function is used to set some external parameters in case of X Window<br>
	 * Original signature : <code>int cvInitSystem(int, char**)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4658</i>
	 */
	int cvInitSystem(int argc, PointerByReference argv);
	/**
	 * Original signature : <code>int cvStartWindowThread()</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4660</i>
	 */
	int cvStartWindowThread();
	/**
	 * create window<br>
	 * Original signature : <code>int cvNamedWindow(const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4696</i><br>
	 * @deprecated use the safer methods {@link #cvNamedWindow(java.lang.String, int)} and {@link #cvNamedWindow(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	int cvNamedWindow(Pointer name, int flags);
	/**
	 * create window<br>
	 * Original signature : <code>int cvNamedWindow(const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4696</i>
	 */
	int cvNamedWindow(String name, int flags);
	/**
	 * Set and Get Property of the window<br>
	 * Original signature : <code>void cvSetWindowProperty(const char*, int, double)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4701</i><br>
	 * @deprecated use the safer methods {@link #cvSetWindowProperty(java.lang.String, int, double)} and {@link #cvSetWindowProperty(com.sun.jna.Pointer, int, double)} instead
	 */
	@Deprecated
	void cvSetWindowProperty(Pointer name, int prop_id, double prop_value);
	/**
	 * Set and Get Property of the window<br>
	 * Original signature : <code>void cvSetWindowProperty(const char*, int, double)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4701</i>
	 */
	void cvSetWindowProperty(String name, int prop_id, double prop_value);
	/**
	 * Original signature : <code>double cvGetWindowProperty(const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4703</i><br>
	 * @deprecated use the safer methods {@link #cvGetWindowProperty(java.lang.String, int)} and {@link #cvGetWindowProperty(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	double cvGetWindowProperty(Pointer name, int prop_id);
	/**
	 * Original signature : <code>double cvGetWindowProperty(const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4703</i>
	 */
	double cvGetWindowProperty(String name, int prop_id);
	/**
	 * display image within window (highgui windows remember their content)<br>
	 * Original signature : <code>void cvShowImage(const char*, const CvArr*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4708</i><br>
	 * @deprecated use the safer methods {@link #cvShowImage(java.lang.String, sj.opencv.jna.highgui.HighguiLibrary.CvArr)} and {@link #cvShowImage(com.sun.jna.Pointer, sj.opencv.jna.highgui.HighguiLibrary.CvArr)} instead
	 */
	@Deprecated
	void cvShowImage(Pointer name, HighguiLibrary.CvArr image);
	/**
	 * display image within window (highgui windows remember their content)<br>
	 * Original signature : <code>void cvShowImage(const char*, const CvArr*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4708</i>
	 */
	void cvShowImage(String name, HighguiLibrary.CvArr image);
	/**
	 * resize/move window<br>
	 * Original signature : <code>void cvResizeWindow(const char*, int, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4713</i><br>
	 * @deprecated use the safer methods {@link #cvResizeWindow(java.lang.String, int, int)} and {@link #cvResizeWindow(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated
	void cvResizeWindow(Pointer name, int width, int height);
	/**
	 * resize/move window<br>
	 * Original signature : <code>void cvResizeWindow(const char*, int, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4713</i>
	 */
	void cvResizeWindow(String name, int width, int height);
	/**
	 * Original signature : <code>void cvMoveWindow(const char*, int, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4715</i><br>
	 * @deprecated use the safer methods {@link #cvMoveWindow(java.lang.String, int, int)} and {@link #cvMoveWindow(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated
	void cvMoveWindow(Pointer name, int x, int y);
	/**
	 * Original signature : <code>void cvMoveWindow(const char*, int, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4715</i>
	 */
	void cvMoveWindow(String name, int x, int y);
	/**
	 * destroy window and all the trackers associated with it<br>
	 * Original signature : <code>void cvDestroyWindow(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4720</i><br>
	 * @deprecated use the safer methods {@link #cvDestroyWindow(java.lang.String)} and {@link #cvDestroyWindow(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvDestroyWindow(Pointer name);
	/**
	 * destroy window and all the trackers associated with it<br>
	 * Original signature : <code>void cvDestroyWindow(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4720</i>
	 */
	void cvDestroyWindow(String name);
	/**
	 * Original signature : <code>void cvDestroyAllWindows()</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4722</i>
	 */
	void cvDestroyAllWindows();
	/**
	 * get native window handle (HWND in case of Win32 and Widget in case of X Window)<br>
	 * Original signature : <code>void* cvGetWindowHandle(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4727</i><br>
	 * @deprecated use the safer methods {@link #cvGetWindowHandle(java.lang.String)} and {@link #cvGetWindowHandle(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	Pointer cvGetWindowHandle(Pointer name);
	/**
	 * get native window handle (HWND in case of Win32 and Widget in case of X Window)<br>
	 * Original signature : <code>void* cvGetWindowHandle(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4727</i>
	 */
	Pointer cvGetWindowHandle(String name);
	/**
	 * get name of highgui window given its native handle<br>
	 * Original signature : <code>char* cvGetWindowName(void*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4732</i>
	 */
	Pointer cvGetWindowName(Pointer window_handle);
	/**
	 * create trackbar and display it on top of given window, set callback<br>
	 * Original signature : <code>int cvCreateTrackbar(const char*, const char*, int*, int, CvTrackbarCallback)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4738</i><br>
	 * @deprecated use the safer methods {@link #cvCreateTrackbar(java.lang.String, java.lang.String, java.nio.IntBuffer, int, sj.opencv.jna.cxcore.CxcoreLibrary.CvTrackbarCallback)} and {@link #cvCreateTrackbar(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, int, sj.opencv.jna.cxcore.CxcoreLibrary.CvTrackbarCallback)} instead
	 */
	@Deprecated
	int cvCreateTrackbar(Pointer trackbar_name, Pointer window_name, IntByReference value, int count, CvTrackbarCallback on_change);
	/**
	 * create trackbar and display it on top of given window, set callback<br>
	 * Original signature : <code>int cvCreateTrackbar(const char*, const char*, int*, int, CvTrackbarCallback)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4738</i>
	 */
	int cvCreateTrackbar(String trackbar_name, String window_name, IntBuffer value, int count, CvTrackbarCallback on_change);
	/**
	 * Original signature : <code>int cvCreateTrackbar2(const char*, const char*, int*, int, CvTrackbarCallback2, void*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4741</i><br>
	 * @deprecated use the safer methods {@link #cvCreateTrackbar2(java.lang.String, java.lang.String, java.nio.IntBuffer, int, sj.opencv.jna.cxcore.CxcoreLibrary.CvTrackbarCallback2, com.sun.jna.Pointer)} and {@link #cvCreateTrackbar2(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, int, sj.opencv.jna.cxcore.CxcoreLibrary.CvTrackbarCallback2, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	int cvCreateTrackbar2(Pointer trackbar_name, Pointer window_name, IntByReference value, int count, CvTrackbarCallback2 on_change, Pointer userdata);
	/**
	 * Original signature : <code>int cvCreateTrackbar2(const char*, const char*, int*, int, CvTrackbarCallback2, void*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4741</i>
	 */
	int cvCreateTrackbar2(String trackbar_name, String window_name, IntBuffer value, int count, CvTrackbarCallback2 on_change, Pointer userdata);
	/**
	 * retrieve or set trackbar position<br>
	 * Original signature : <code>int cvGetTrackbarPos(const char*, const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4746</i><br>
	 * @deprecated use the safer methods {@link #cvGetTrackbarPos(java.lang.String, java.lang.String)} and {@link #cvGetTrackbarPos(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	int cvGetTrackbarPos(Pointer trackbar_name, Pointer window_name);
	/**
	 * retrieve or set trackbar position<br>
	 * Original signature : <code>int cvGetTrackbarPos(const char*, const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4746</i>
	 */
	int cvGetTrackbarPos(String trackbar_name, String window_name);
	/**
	 * Original signature : <code>void cvSetTrackbarPos(const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4748</i><br>
	 * @deprecated use the safer methods {@link #cvSetTrackbarPos(java.lang.String, java.lang.String, int)} and {@link #cvSetTrackbarPos(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	void cvSetTrackbarPos(Pointer trackbar_name, Pointer window_name, int pos);
	/**
	 * Original signature : <code>void cvSetTrackbarPos(const char*, const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4748</i>
	 */
	void cvSetTrackbarPos(String trackbar_name, String window_name, int pos);
	/**
	 * assign callback for mouse events<br>
	 * Original signature : <code>void cvSetMouseCallback(const char*, CvMouseCallback, void*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4774</i><br>
	 * @deprecated use the safer methods {@link #cvSetMouseCallback(java.lang.String, sj.opencv.jna.cxcore.CxcoreLibrary.CvMouseCallback, com.sun.jna.Pointer)} and {@link #cvSetMouseCallback(com.sun.jna.Pointer, sj.opencv.jna.cxcore.CxcoreLibrary.CvMouseCallback, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvSetMouseCallback(Pointer window_name, CvMouseCallback on_mouse, Pointer param);
	/**
	 * assign callback for mouse events<br>
	 * Original signature : <code>void cvSetMouseCallback(const char*, CvMouseCallback, void*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4774</i>
	 */
	void cvSetMouseCallback(String window_name, CvMouseCallback on_mouse, Pointer param);
	/**
	 * load image from file<br>
	 * iscolor can be a combination of above flags where CV_LOAD_IMAGE_UNCHANGED<br>
	 * overrides the other flags<br>
	 * using CV_LOAD_IMAGE_ANYCOLOR alone is equivalent to CV_LOAD_IMAGE_UNCHANGED<br>
	 * unless CV_LOAD_IMAGE_ANYDEPTH is specified images are converted to 8bit<br>
	 * Original signature : <code>IplImage* cvLoadImage(const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4795</i><br>
	 * @deprecated use the safer methods {@link #cvLoadImage(java.lang.String, int)} and {@link #cvLoadImage(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	JNAIplImage cvLoadImage(Pointer filename, int iscolor);
	/**
	 * load image from file<br>
	 * iscolor can be a combination of above flags where CV_LOAD_IMAGE_UNCHANGED<br>
	 * overrides the other flags<br>
	 * using CV_LOAD_IMAGE_ANYCOLOR alone is equivalent to CV_LOAD_IMAGE_UNCHANGED<br>
	 * unless CV_LOAD_IMAGE_ANYDEPTH is specified images are converted to 8bit<br>
	 * Original signature : <code>IplImage* cvLoadImage(const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4795</i>
	 */
	JNAIplImage cvLoadImage(String filename, int iscolor);
	/**
	 * Original signature : <code>CvMat* cvLoadImageM(const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4797</i><br>
	 * @deprecated use the safer methods {@link #cvLoadImageM(java.lang.String, int)} and {@link #cvLoadImageM(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	CvMat cvLoadImageM(Pointer filename, int iscolor);
	/**
	 * Original signature : <code>CvMat* cvLoadImageM(const char*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4797</i>
	 */
	CvMat cvLoadImageM(String filename, int iscolor);
	/**
	 * save image to file<br>
	 * Original signature : <code>int cvSaveImage(const char*, const CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4813</i><br>
	 * @deprecated use the safer methods {@link #cvSaveImage(java.lang.String, sj.opencv.jna.highgui.HighguiLibrary.CvArr, int[])} and {@link #cvSaveImage(com.sun.jna.Pointer, sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	int cvSaveImage(Pointer filename, HighguiLibrary.CvArr image, IntByReference params);
	/**
	 * save image to file<br>
	 * Original signature : <code>int cvSaveImage(const char*, const CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4813</i>
	 */
	int cvSaveImage(String filename, HighguiLibrary.CvArr image, int params[]);
	/**
	 * decode image stored in the buffer<br>
	 * Original signature : <code>IplImage* cvDecodeImage(const CvMat*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4818</i>
	 */
	JNAIplImage cvDecodeImage(CvMat buf, int iscolor);
	/**
	 * Original signature : <code>CvMat* cvDecodeImageM(const CvMat*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4820</i>
	 */
	CvMat cvDecodeImageM(CvMat buf, int iscolor);
	/**
	 * encode image and store the result as a byte vector (single-row 8uC1 matrix)<br>
	 * Original signature : <code>CvMat* cvEncodeImage(const char*, const CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4825</i><br>
	 * @deprecated use the safer methods {@link #cvEncodeImage(java.lang.String, sj.opencv.jna.highgui.HighguiLibrary.CvArr, int[])} and {@link #cvEncodeImage(com.sun.jna.Pointer, sj.opencv.jna.highgui.HighguiLibrary.CvArr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	CvMat cvEncodeImage(Pointer ext, HighguiLibrary.CvArr image, IntByReference params);
	/**
	 * encode image and store the result as a byte vector (single-row 8uC1 matrix)<br>
	 * Original signature : <code>CvMat* cvEncodeImage(const char*, const CvArr*, const int*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4825</i>
	 */
	CvMat cvEncodeImage(String ext, HighguiLibrary.CvArr image, int params[]);
	/**
	 * utility function: convert one image to another with optional vertical flip<br>
	 * Original signature : <code>void cvConvertImage(const CvArr*, CvArr*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4834</i>
	 */
	void cvConvertImage(HighguiLibrary.CvArr src, HighguiLibrary.CvArr dst, int flags);
	/**
	 * wait for key event infinitely (delay<=0) or for "delay" milliseconds<br>
	 * Original signature : <code>int cvWaitKey(int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4839</i>
	 */
	int cvWaitKey(int delay);
	/**
	 * Original signature : <code>void cvSetOpenGlDrawCallback(const char*, CvOpenGlDrawCallback, void*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4842</i><br>
	 * @deprecated use the safer methods {@link #cvSetOpenGlDrawCallback(java.lang.String, sj.opencv.jna.cxcore.CxcoreLibrary.CvOpenGlDrawCallback, com.sun.jna.Pointer)} and {@link #cvSetOpenGlDrawCallback(com.sun.jna.Pointer, sj.opencv.jna.cxcore.CxcoreLibrary.CvOpenGlDrawCallback, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvSetOpenGlDrawCallback(Pointer window_name, CvOpenGlDrawCallback callback, Pointer userdata);
	/**
	 * Original signature : <code>void cvSetOpenGlDrawCallback(const char*, CvOpenGlDrawCallback, void*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4842</i>
	 */
	void cvSetOpenGlDrawCallback(String window_name, CvOpenGlDrawCallback callback, Pointer userdata);
	/**
	 * Original signature : <code>void cvSetOpenGlContext(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4844</i><br>
	 * @deprecated use the safer methods {@link #cvSetOpenGlContext(java.lang.String)} and {@link #cvSetOpenGlContext(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvSetOpenGlContext(Pointer window_name);
	/**
	 * Original signature : <code>void cvSetOpenGlContext(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4844</i>
	 */
	void cvSetOpenGlContext(String window_name);
	/**
	 * Original signature : <code>void cvUpdateWindow(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4846</i><br>
	 * @deprecated use the safer methods {@link #cvUpdateWindow(java.lang.String)} and {@link #cvUpdateWindow(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void cvUpdateWindow(Pointer window_name);
	/**
	 * Original signature : <code>void cvUpdateWindow(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4846</i>
	 */
	void cvUpdateWindow(String window_name);
	/**
	 * start capturing frames from video file<br>
	 * Original signature : <code>CvCapture* cvCreateFileCapture(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4851</i><br>
	 * @deprecated use the safer methods {@link #cvCreateFileCapture(java.lang.String)} and {@link #cvCreateFileCapture(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	HighguiLibrary.CvCapture cvCreateFileCapture(Pointer filename);
	/**
	 * start capturing frames from video file<br>
	 * Original signature : <code>CvCapture* cvCreateFileCapture(const char*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4851</i>
	 */
	HighguiLibrary.CvCapture cvCreateFileCapture(String filename);
	/**
	 * start capturing frames from camera: index = camera_index + domain_offset (CV_CAP_*)<br>
	 * Original signature : <code>CvCapture* cvCreateCameraCapture(int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4897</i>
	 */
	HighguiLibrary.CvCapture cvCreateCameraCapture(int index);
	/**
	 * grab a frame, return 1 on success, 0 on fail.<br>
	 * this function is thought to be fast<br>
	 * Original signature : <code>int cvGrabFrame(CvCapture*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4903</i>
	 */
	int cvGrabFrame(HighguiLibrary.CvCapture capture);
	/**
	 * get the frame grabbed with cvGrabFrame(..)<br>
	 * This function may apply some frame processing like<br>
	 * frame decompression, flipping etc.<br>
	 * !!!DO NOT RELEASE or MODIFY the retrieved frame!!!<br>
	 * Original signature : <code>IplImage* cvRetrieveFrame(CvCapture*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4911</i>
	 */
	JNAIplImage cvRetrieveFrame(HighguiLibrary.CvCapture capture, int streamIdx);
	/**
	 * Just a combination of cvGrabFrame and cvRetrieveFrame<br>
	 * !!!DO NOT RELEASE or MODIFY the retrieved frame!!!<br>
	 * Original signature : <code>IplImage* cvQueryFrame(CvCapture*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4917</i>
	 */
	JNAIplImage cvQueryFrame(HighguiLibrary.CvCapture capture);
	/**
	 * stop capturing/reading and free resources<br>
	 * Original signature : <code>void cvReleaseCapture(CvCapture**)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4922</i><br>
	 * @deprecated use the safer method {@link #cvReleaseCapture(sj.opencv.jna.highgui.HighguiLibrary.CvCapture[])} instead
	 */
	@Deprecated
	void cvReleaseCapture(PointerByReference capture);
	/**
	 * stop capturing/reading and free resources<br>
	 * Original signature : <code>void cvReleaseCapture(CvCapture**)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:4922</i>
	 */
	void cvReleaseCapture(HighguiLibrary.CvCapture capture[]);
	/**
	 * retrieve or set capture properties<br>
	 * Original signature : <code>double cvGetCaptureProperty(CvCapture*, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5141</i>
	 */
	double cvGetCaptureProperty(HighguiLibrary.CvCapture capture, int property_id);
	/**
	 * Original signature : <code>int cvSetCaptureProperty(CvCapture*, int, double)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5143</i>
	 */
	int cvSetCaptureProperty(HighguiLibrary.CvCapture capture, int property_id, double value);
	/**
	 * Return the type of the capturer (eg, CV_CAP_V4W, CV_CAP_UNICAP), which is unknown if created with CV_CAP_ANY<br>
	 * Original signature : <code>int cvGetCaptureDomain(CvCapture*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5148</i>
	 */
	int cvGetCaptureDomain(HighguiLibrary.CvCapture capture);
	/**
	 * Original signature : <code>int CV_FOURCC(char, char, char, char)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5152</i>
	 */
	int CV_FOURCC(byte c1, byte c2, byte c3, byte c4);
	/**
	 * initialize video file writer<br>
	 * Original signature : <code>CvVideoWriter* cvCreateVideoWriter(const char*, int, double, CvSize, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5157</i><br>
	 * @deprecated use the safer methods {@link #cvCreateVideoWriter(java.lang.String, int, double, sj.opencv.jna.cxcore.CvSize.ByValue, int)} and {@link #cvCreateVideoWriter(com.sun.jna.Pointer, int, double, sj.opencv.jna.cxcore.CvSize.ByValue, int)} instead
	 */
	@Deprecated
	HighguiLibrary.CvVideoWriter cvCreateVideoWriter(Pointer filename, int fourcc, double fps, sj.opencv.jna.cxcore.CvSize.ByValue frame_size, int is_color);
	/**
	 * initialize video file writer<br>
	 * Original signature : <code>CvVideoWriter* cvCreateVideoWriter(const char*, int, double, CvSize, int)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5157</i>
	 */
	HighguiLibrary.CvVideoWriter cvCreateVideoWriter(String filename, int fourcc, double fps, sj.opencv.jna.cxcore.CvSize.ByValue frame_size, int is_color);
	/**
	 * write frame to video file<br>
	 * Original signature : <code>int cvWriteFrame(CvVideoWriter*, const IplImage*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5162</i>
	 */
	int cvWriteFrame(HighguiLibrary.CvVideoWriter writer, JNAIplImage image);
	/**
	 * close video file writer<br>
	 * Original signature : <code>void cvReleaseVideoWriter(CvVideoWriter**)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5167</i><br>
	 * @deprecated use the safer method {@link #cvReleaseVideoWriter(sj.opencv.jna.highgui.HighguiLibrary.CvVideoWriter[])} instead
	 */
	@Deprecated
	void cvReleaseVideoWriter(PointerByReference writer);
	/**
	 * close video file writer<br>
	 * Original signature : <code>void cvReleaseVideoWriter(CvVideoWriter**)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5167</i>
	 */
	void cvReleaseVideoWriter(HighguiLibrary.CvVideoWriter writer[]);
	/**
	 * Original signature : <code>void cvSetPreprocessFuncWin32_(const void*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5169</i>
	 */
	void cvSetPreprocessFuncWin32_(Pointer callback);
	/**
	 * Original signature : <code>void cvSetPostprocessFuncWin32_(const void*)</code><br>
	 * <i>native declaration : modules/highgui/include/opencv2/highgui/highgui_c.h:5171</i>
	 */
	void cvSetPostprocessFuncWin32_(Pointer callback);
	public static class CvArr extends PointerType {
		public CvArr(Pointer address) {
			super(address);
		}
		public CvArr() {
			super();
		}
	};
	public static class CvCapture extends PointerType {
		public CvCapture(Pointer address) {
			super(address);
		}
		public CvCapture() {
			super();
		}
	};
	public static class CvVideoWriter extends PointerType {
		public CvVideoWriter(Pointer address) {
			super(address);
		}
		public CvVideoWriter() {
			super();
		}
	};
}
