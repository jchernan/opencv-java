/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.objdetect;
import com.sun.jna.Structure;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
/**
 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5187</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvHaarClassifier extends Structure {
	public int count;
	/// C type : CvHaarFeature*
	public sj.opencv.jna.objdetect.CvHaarFeature.ByReference haar_feature;
	/// C type : float*
	public FloatByReference threshold;
	/// C type : int*
	public IntByReference left;
	/// C type : int*
	public IntByReference right;
	/// C type : float*
	public FloatByReference alpha;
	public CvHaarClassifier() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"count", "haar_feature", "threshold", "left", "right", "alpha"});
	}
	/**
	 * @param haar_feature C type : CvHaarFeature*<br>
	 * @param threshold C type : float*<br>
	 * @param left C type : int*<br>
	 * @param right C type : int*<br>
	 * @param alpha C type : float*
	 */
	public CvHaarClassifier(int count, sj.opencv.jna.objdetect.CvHaarFeature.ByReference haar_feature, FloatByReference threshold, IntByReference left, IntByReference right, FloatByReference alpha) {
		super();
		this.count = count;
		this.haar_feature = haar_feature;
		this.threshold = threshold;
		this.left = left;
		this.right = right;
		this.alpha = alpha;
		initFieldOrder();
	}
	public static class ByReference extends CvHaarClassifier implements Structure.ByReference {
		
	};
	public static class ByValue extends CvHaarClassifier implements Structure.ByValue {
		
	};
}
