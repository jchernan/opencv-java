/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.objdetect;
import com.sun.jna.Library;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.PointerByReference;
import sj.opencv.jna.cxcore.CvMemStorage;
import sj.opencv.jna.cxcore.CvSeq;
import sj.opencv.jna.cxcore.JNAIplImage;
import sj.opencv.jna.highgui.HighguiLibrary.CvArr;
/**
 * JNA Wrapper for library <b>objdetect</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface ObjdetectLibrary extends Library {
	/// <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp</i>
	public static final int CV_HAAR_FEATURE_MAX = (int)3;
	/// <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp</i>
	public static final int CV_HAAR_DO_CANNY_PRUNING = (int)1;
	/// <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp</i>
	public static final String CV_TYPE_NAME_HAAR = (String)"opencv-haar-classifier";
	/// <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp</i>
	public static final int CV_HAAR_FIND_BIGGEST_OBJECT = (int)4;
	/// <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp</i>
	public static final int CV_HAAR_MAGIC_VAL = (int)1112539136;
	/// <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp</i>
	public static final int CV_HAAR_DO_ROUGH_SEARCH = (int)8;
	/// <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp</i>
	public static final int CV_HAAR_SCALE_IMAGE = (int)2;
	/**
	 * Loads haar classifier cascade from a directory.<br>
	 * It is obsolete: convert your cascade to xml and use cvLoad instead<br>
	 * Original signature : <code>CvHaarClassifierCascade* cvLoadHaarClassifierCascade(const char*, CvSize)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5214</i><br>
	 * @deprecated use the safer methods {@link #cvLoadHaarClassifierCascade(java.lang.String, sj.opencv.jna.cxcore.CvSize.ByValue)} and {@link #cvLoadHaarClassifierCascade(com.sun.jna.Pointer, sj.opencv.jna.cxcore.CvSize.ByValue)} instead
	 */
	@Deprecated 
	CvHaarClassifierCascade cvLoadHaarClassifierCascade(Pointer directory, sj.opencv.jna.cxcore.CvSize.ByValue orig_window_size);
	/**
	 * Loads haar classifier cascade from a directory.<br>
	 * It is obsolete: convert your cascade to xml and use cvLoad instead<br>
	 * Original signature : <code>CvHaarClassifierCascade* cvLoadHaarClassifierCascade(const char*, CvSize)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5214</i>
	 */
	CvHaarClassifierCascade cvLoadHaarClassifierCascade(String directory, sj.opencv.jna.cxcore.CvSize.ByValue orig_window_size);
	/**
	 * Original signature : <code>void cvReleaseHaarClassifierCascade(CvHaarClassifierCascade**)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5216</i><br>
	 * @deprecated use the safer method {@link #cvReleaseHaarClassifierCascade(sj.opencv.jna.objdetect.CvHaarClassifierCascade.ByReference[])} instead
	 */
	@Deprecated 
	void cvReleaseHaarClassifierCascade(PointerByReference cascade);
	/**
	 * Original signature : <code>void cvReleaseHaarClassifierCascade(CvHaarClassifierCascade**)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5216</i>
	 */
	void cvReleaseHaarClassifierCascade(CvHaarClassifierCascade.ByReference cascade[]);
	/**
	 * Original signature : <code>CvSeq* cvHaarDetectObjects(const CvArr*, CvHaarClassifierCascade*, CvMemStorage*, double, int, int, CvSize, CvSize)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5218</i>
	 */
	CvSeq cvHaarDetectObjects(CvArr image, CvHaarClassifierCascade cascade, CvMemStorage storage, double scale_factor, int min_neighbors, int flags, sj.opencv.jna.cxcore.CvSize.ByValue min_size, sj.opencv.jna.cxcore.CvSize.ByValue max_size);
	/**
	 * sets images for haar classifier cascade<br>
	 * Original signature : <code>void cvSetImagesForHaarClassifierCascade(CvHaarClassifierCascade*, const CvArr*, const CvArr*, const CvArr*, double)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5223</i>
	 */
	void cvSetImagesForHaarClassifierCascade(CvHaarClassifierCascade cascade, CvArr sum, CvArr sqsum, CvArr tilted_sum, double scale);
	/**
	 * runs the cascade on the specified window<br>
	 * Original signature : <code>int cvRunHaarClassifierCascade(const CvHaarClassifierCascade*, CvPoint, int)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5228</i>
	 */
	int cvRunHaarClassifierCascade(CvHaarClassifierCascade cascade, sj.opencv.jna.cxcore.CvPoint.ByValue pt, int start_stage);
	/**
	 * load trained detector from a file<br>
	 * //<br>
	 * // API<br>
	 * // CvLatentSvmDetector* cvLoadLatentSvmDetector(const char* filename);<br>
	 * // INPUT<br>
	 * // filename				- path to the file containing the parameters of<br>
	 * - trained Latent SVM detector<br>
	 * // OUTPUT<br>
	 * // trained Latent SVM detector in internal representation<br>
	 * Original signature : <code>CvLatentSvmDetector* cvLoadLatentSvmDetector(const char*)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5270</i><br>
	 * @deprecated use the safer methods {@link #cvLoadLatentSvmDetector(java.lang.String)} and {@link #cvLoadLatentSvmDetector(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	CvLatentSvmDetector cvLoadLatentSvmDetector(Pointer filename);
	/**
	 * load trained detector from a file<br>
	 * //<br>
	 * // API<br>
	 * // CvLatentSvmDetector* cvLoadLatentSvmDetector(const char* filename);<br>
	 * // INPUT<br>
	 * // filename				- path to the file containing the parameters of<br>
	 * - trained Latent SVM detector<br>
	 * // OUTPUT<br>
	 * // trained Latent SVM detector in internal representation<br>
	 * Original signature : <code>CvLatentSvmDetector* cvLoadLatentSvmDetector(const char*)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5270</i>
	 */
	CvLatentSvmDetector cvLoadLatentSvmDetector(String filename);
	/**
	 * release memory allocated for CvLatentSvmDetector structure<br>
	 * //<br>
	 * // API<br>
	 * // void cvReleaseLatentSvmDetector(CvLatentSvmDetector** detector);<br>
	 * // INPUT<br>
	 * // detector				- CvLatentSvmDetector structure to be released<br>
	 * // OUTPUT<br>
	 * Original signature : <code>void cvReleaseLatentSvmDetector(CvLatentSvmDetector**)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5281</i><br>
	 * @deprecated use the safer method {@link #cvReleaseLatentSvmDetector(sj.opencv.jna.objdetect.CvLatentSvmDetector.ByReference[])} instead
	 */
	@Deprecated 
	void cvReleaseLatentSvmDetector(PointerByReference detector);
	/**
	 * release memory allocated for CvLatentSvmDetector structure<br>
	 * //<br>
	 * // API<br>
	 * // void cvReleaseLatentSvmDetector(CvLatentSvmDetector** detector);<br>
	 * // INPUT<br>
	 * // detector				- CvLatentSvmDetector structure to be released<br>
	 * // OUTPUT<br>
	 * Original signature : <code>void cvReleaseLatentSvmDetector(CvLatentSvmDetector**)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5281</i>
	 */
	void cvReleaseLatentSvmDetector(CvLatentSvmDetector.ByReference detector[]);
	/**
	 * find rectangular regions in the given image that are likely <br>
	 * // to contain objects and corresponding confidence levels<br>
	 * //<br>
	 * // API<br>
	 * // CvSeq* cvLatentSvmDetectObjects(const IplImage* image, <br>
	 * //									CvLatentSvmDetector* detector, <br>
	 * //									CvMemStorage* storage, <br>
	 * //									float overlap_threshold = 0.5f,<br>
	 * //                                  int numThreads = -1);<br>
	 * // INPUT<br>
	 * // image				- image to detect objects in<br>
	 * // detector				- Latent SVM detector in internal representation<br>
	 * // storage				- memory storage to store the resultant sequence <br>
	 * //							of the object candidate rectangles<br>
	 * // overlap_threshold	- threshold for the non-maximum suppression algorithm <br>
	 * = 0.5f [here will be the reference to original paper]<br>
	 * // OUTPUT<br>
	 * // sequence of detected objects (bounding boxes and confidence levels stored in CvObjectDetection structures)<br>
	 * Original signature : <code>CvSeq* cvLatentSvmDetectObjects(IplImage*, CvLatentSvmDetector*, CvMemStorage*, float, int)</code><br>
	 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5303</i>
	 */
	CvSeq cvLatentSvmDetectObjects(JNAIplImage image, CvLatentSvmDetector detector, CvMemStorage storage, float overlap_threshold, int numThreads);
	public static class CvHidHaarClassifierCascade extends PointerType {
		public CvHidHaarClassifierCascade(Pointer address) {
			super(address);
		}
		public CvHidHaarClassifierCascade() {
			super();
		}
	};
}
