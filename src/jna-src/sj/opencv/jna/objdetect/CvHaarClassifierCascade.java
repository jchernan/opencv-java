/* Description and License
 * A Java library that wraps the functionality of the native image 
 * processing library OpenCV
 *
 * (c) Sigurdur Orn Adalgeirsson (siggi@alum.mit.edu)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 */
 
package sj.opencv.jna.objdetect;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import sj.opencv.jna.cxcore.CvSize;
import sj.opencv.jna.objdetect.ObjdetectLibrary.CvHidHaarClassifierCascade;
/**
 * <i>native declaration : modules/objdetect/include/opencv2/objdetect/objdetect.hpp:5204</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvHaarClassifierCascade extends Structure {
	public int flags;
	public int count;
	/// C type : CvSize
	public CvSize orig_window_size;
	/// C type : CvSize
	public CvSize real_window_size;
	public double scale;
	/// C type : CvHaarStageClassifier*
	public sj.opencv.jna.objdetect.CvHaarStageClassifier.ByReference stage_classifier;
	/// C type : CvHidHaarClassifierCascade*
	public CvHidHaarClassifierCascade hid_cascade;
	public CvHaarClassifierCascade() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"flags", "count", "orig_window_size", "real_window_size", "scale", "stage_classifier", "hid_cascade"});
	}
	/**
	 * @param orig_window_size C type : CvSize<br>
	 * @param real_window_size C type : CvSize<br>
	 * @param stage_classifier C type : CvHaarStageClassifier*<br>
	 * @param hid_cascade C type : CvHidHaarClassifierCascade*
	 */
	public CvHaarClassifierCascade(int flags, int count, CvSize orig_window_size, CvSize real_window_size, double scale, sj.opencv.jna.objdetect.CvHaarStageClassifier.ByReference stage_classifier, CvHidHaarClassifierCascade hid_cascade) {
		super();
		this.flags = flags;
		this.count = count;
		this.orig_window_size = orig_window_size;
		this.real_window_size = real_window_size;
		this.scale = scale;
		this.stage_classifier = stage_classifier;
		this.hid_cascade = hid_cascade;
		initFieldOrder();
	}

	public CvHaarClassifierCascade(Pointer p){
		super(p);
	}

	public static class ByReference extends CvHaarClassifierCascade implements Structure.ByReference {

		public ByReference() {
			super();
			// TODO Auto-generated constructor stub
		}

		public ByReference(Pointer p) {
			super(p);
			// TODO Auto-generated constructor stub
		}

	};
	public static class ByValue extends CvHaarClassifierCascade implements Structure.ByValue {

	};
}
